{"version":3,"sources":["webpack:///./src/js/app.js","webpack:///./src/js/connections/dataPool.js","webpack:///./src/js/data/config.js","webpack:///./src/js/graph/components/edges/main.js","webpack:///./src/js/graph/components/nodes/main.js","webpack:///./src/js/graph/components/nodes/shaders/marker.fsh.js","webpack:///./src/js/graph/components/nodes/shaders/marker.vsh.js","webpack:///./src/js/graph/components/nodes/shaders/markerImg.fsh.js","webpack:///./src/js/graph/components/nodes/shaders/markerImg.vsh.js","webpack:///./src/js/graph/components/renderer/main.js","webpack:///./src/js/graph/helpers/stats.js","webpack:///./src/js/graph/interactions/datGUI.js","webpack:///./src/js/graph/interactions/keyboard.js","webpack:///./src/js/graph/main.js","webpack:///./src/js/utils/helpers.js","webpack:///./src/js/utils/keyboard.js"],"names":["__ENV__","console","info","Config","isDev","keyboardPressFunction","key","action","dataPoolSocket","recalcPos","reloadGraph","listenerFunction","event","message","JSON","parse","data","clearInterval","intervalGetGraph","graphObj","edges","createEdges","nodes","defaultProps","createNodes","state","firstLoad","ressetLook","stringify","pos","map","p","datGui","updateNodeColorProp","props","updateComunityField","Object","keys","nodesGroup","updateNodePositions","renderer","render","useGuiControl","Graph","window","graphObjVar","init","DataPool","setInterval","getGraph","ws","WebSocket","address","onopen","alertify","success","bind","onclose","warning","onerror","error","addEventListener","open","readyState","OPEN","isOpen","type","send","nodesId","scene","color","antialias","isShowingStats","useStats","useKeyboard","isLoaded","isMouseMoving","isMouseOver","maxAnisotropy","dpr","layers","enabled","clearColor","exposure","strength","bloomStrength","bloomThreshold","bloomRadius","material","scale","show","radius","edgeColor","edgeWidth","roughness","opacity","fog","near","camera","fov","far","aspect","posX","posY","posZ","controls","autoRotate","autoRotateSpeed","rotateSpeed","zoomSpeed","minDistance","maxDistance","minPolarAngle","maxPolarAngle","Math","PI","minAzimuthAngle","Infinity","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","target","x","y","z","Edges","layer","bloomLayer","numEdges","edgesData","instancedEdges","positions","positionVertices","f","arr","index","push","i","s","t","id_s","id_t","geometry","attributes","position","array","Float32Array","needsUpdate","computeBoundingSphere","prop","colors","colormap","nshades","format","alpha","values","bufferColors","sort","val1","val2","r","g","b","flat","length","alert","value","nodesData","createVertices","updateGeometry","dispose","THREE","setFromPoints","vertices","segments","nodeInId","id","nodeOutId","remove","deleteAllEdges","vertexColors","transparent","linewidth","setAttribute","add","randomString","random","toString","substring","Nodes","use2d","comunity","includes","entries","getComunity","nodesGroupName","nodesObj","numNodes","updateColors","fixedColor","mesh","vertexShader","getMarkerVertexShader","fixedNodeSize","addAttribute","uniforms","deleteAttribute","colorHEX","updateColor","bufferNodeSize","updateSizes","sizes","sMin","min","sMax","max","sizesBuffer","bufferNodeSizes","size","instancedNodes","bufferRadius","bufferOpacity","bufferNodeScale","bufferNodePositions","clear","name","what","nodesMesh","instancedGeometry","randomChoice","floor","marker","availableMarkers","markerGeometry","fragmentShader","getMarkerFragmentShader","depthTest","depthWrite","distFunctions","getDistFunction","exist","getShading","shadingStr","markerVertexShader","markerImgFragmentShader","getMarkerImgVertexShader","dataURIToBlob","dataURI","binStr","atob","split","len","Uint8Array","charCodeAt","Blob","saveDataURI","blob","link","document","createElement","download","href","URL","createObjectURL","onclick","setTimeout","revokeObjectURL","removeAttribute","click","defaultFileName","ext","str","Date","toLocaleDateString","toLocaleTimeString","replace","Renderer","container","canvas","appState","preserveDrawingBuffer","autoClear","stats","Stats","setUp","setPixelRatio","devicePixelRatio","getMaxAnisotropy","fxaaPass","ShaderPass","FXAAShader","pixelRatio","getPixelRatio","renderPass","RenderPass","offsetWidth","offsetHeight","composer","EffectComposer","addPass","updateSize","takeScreenshot","btnSave","getElementById","widthRender","heightRender","keepPos","change","originalAspect","newSize","left","right","top","bottom","updateProjectionMatrix","clientWidth","clientHeight","setCameraAspect","setSize","start","end","removeEventListener","widthImage","heightImage","saveWithTransparency","background","setClearColor","toDataURL","takingScreenshot","$","modal","stopChanges","parseInt","checked","DataURI","getURI","rS","bS","glS","tS","BrowserStats","glStats","threeStats","rStats","CSSPath","userTimingAPI","frame","caption","over","average","avgMs","fps","below","calls","raf","rstats","texture","groups","fractions","base","steps","plugins","tick","update","updateDropdown","list","innerHTMLStr","domElement","children","innerHTML","DatGUI","idCanvasHTML","nodes0","edges0","gui","dat","autoPlace","appendChild","sceneFolder","addFolder","addColor","onChange","nodesFolder","comunityField","setComunity","nodeName","node","visible","changeColor","sizeField","sizeByField","changeScale","changeEdgeColor","changeEdgeWidth","changeOpacity","colorProp","colorByProp","colorField","colorByField","edgesFolder","colorEdge","field","colorEdgeProp","colorEdgeField","unshift","filter","v","Interaction","keypressFunc","timeout","keyboard","Keyboard","keypressEvent","repeat","alertHTMLobj","bootstrapAlert","toLowerCase","closed","vimMode","innerWidth","innerHeight","confirm","renders","rendering","viewSize","aspectRatio","OrbitControls","set","enableKeys","screenSpacePanning","enableRotate","keyboardInteraction","boundingSphere","center","lookAt","deleteAllNodes","width","height","transparency","uri","stop","Helpers","fn","threshhold","scope","last","deferTimer","context","now","args","arguments","clearTimeout","apply","xhr","lengthComputable","percentComplete","loaded","total","log","round","setHex","shading","side","verticesNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","materialKey","textures","ALIAS","keyCodes","onKeyChange","onBlur","keyCode","keyDesc","pressed","indexOf","toUpperCase","aliases","aliasKeys","shiftKey","ctrlKey","altKey","metaKey"],"mappings":"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","file":"main.app.js","sourcesContent":["\nimport Graph from './graph/main';\nimport Config from './data/config';\nimport DataPool from \"./connections/dataPool\";\n\n\nif(__ENV__ === 'dev') {\n  console.info('----- RUNNING IN DEV ENVIRONMENT! -----');\n  Config.isDev = true;\n}\n\n\nfunction keyboardPressFunction(key, action) {\n        switch (action) {\n\n            case \"deleteNode\":\n                //let pickedObjectsNames = cameraObj.pickedObjects;\n                //if (pickedObjectsNames.length>0) {\n\n                //cameraObj.deleteHelpers();\n                //Config.vimMode = \"Visual\"\n                //dataPoolSocket.deleteNodes(pickedObjectsNames);\n                //pickedObjectsNames.map(nodeId=>nodes0.deleteNode(nodeId));\n                ////pickedObjectsNames.map(=>edges0.deleteByNode(nodeId));\n                //cameraObj.unpick();\n                //}\n\n                //render()\n                break;\n            case \"move\":\n                //let p = 0.1\n                //let dr = {\n                //\"l\" :[p, 0, 0],\n                //\"j\" :[-p, 0 ,0],\n                //\"i\": [0, p, 0],\n                //\"k\": [0, -p, 0]\n                //}[key.toLowerCase()]\n                //let pWorld =  new THREE.Vector3( dr[0], dr[1], -1 ).unproject( camera );\n                //nodes0.moveNodes({}, cameraObj.pickedObjects, dr)\n\n                //render()\n                break;\n            case \"recalcPos\":\n                dataPoolSocket.recalcPos()\n\n                break;\n\n            case \"reloadGraph\":\n                dataPoolSocket.reloadGraph()\n                break;\n\n            default:\n                break;\n        }\n    }\nfunction listenerFunction(event) {\n    let message = JSON.parse(event.data);\n    switch (message[\"type\"]) {\n        case \"getGraph\":\n            clearInterval(intervalGetGraph);\n            //graphObj.state.defaultProps = message.defaultProps\n            //\n            graphObj.edges.createEdges(message.nodes, message.edges, message.defaultProps);\n            graphObj.nodes.createNodes(message.nodes, true);\n            if(graphObj.state.firstLoad){\n                graphObj.firstLoad = false;\n                graphObj.ressetLook();\n                clearInterval(intervalGetGraph)\n            }\n            let nodes = JSON.parse(JSON.stringify(message.nodes))\n            nodes.pos = nodes.pos.map((p)=>p*0.3);\n            graphObj.nodes.createNodes(nodes, false);\n            //\n            //camera.position.set(0, nodes0.max_vals[2] * (1 + 2), 0);\n            graphObj.datGui.updateNodeColorProp(message.nodes.props)\n            graphObj.datGui.updateComunityField(Object.keys(graphObj.nodes.nodesGroup));\n            //datGui.updateEdgeColorProp(message.edges.props)\n            //camera.lookAt(nodes0.instancedNodes);\n\n\n            break;\n\n        case \"addNodes\":\n            graphObj.nodes.createNodes(message.nodes, false);\n            if(graphObj.state.firstLoad){\n                graphObj.firstLoad = false;\n                graphObj.ressetLook();\n                clearInterval(intervalGetGraph)\n            }\n\n\n            break;\n        case \"deleteNodes\":\n            //message.info.nodesId.map(nodeId=>nodes0.deleteNode(nodeId));\n            //message.info.edgesName.map(edgeName=>edges0.deleteEdge(edgeName));\n            ////dataPoolSocket.recalcPos();\n            ////\n            //render()\n            break;\n\n        case \"updatePos\":\n            graphObj.nodes.updateNodePositions(message.info.pos);\n            graphObj.edges.updateNodePositions(message.info.pos);\n            graphObj.renderer.render()\n            break;\n\n\n        default:\n            break;\n    }\n\n\n}\n\nConfig.useGuiControl = true;\nconst graphObj = new Graph(\n    \"graphCanvas\",\n    Config,\n    keyboardPressFunction\n)\nwindow.graphObjVar = graphObj;\ngraphObj.init()\n\nlet dataPoolSocket = new DataPool(listenerFunction);\nconst intervalGetGraph = setInterval(() => {\n    dataPoolSocket.getGraph();\n}, 1000);\n\n\n","import alertify from \"alertifyjs\"\n\nimport Config from '../data/config';\n\n\nexport default class DataPool {\n    constructor(listenerFunction) {\n        this.ws = new WebSocket(`ws://${Config.address}/`);\n\n        this.ws.onopen = function (event) {\n            alertify.success(\"opened connection\");\n        }.bind(this,);\n        this.ws.onclose = () => alertify.warning(\"closed connection\");\n        this.ws.onerror = () => alertify.error(\"error connection\");\n        this.ws.addEventListener(\"message\", listenerFunction);\n        this.getGraph = this.getGraph.bind(this)\n    }\n\n    isOpen() {\n        const open = this.ws.readyState === this.ws.OPEN\n        if (!open){\n            alertify.error(\"Connection Closed\")\n            console.error(\"Conection closed\")\n            this.ws = new WebSocket(`ws://${Config.address}/`);\n        }\n        return open\n    }\n\n    getGraph() {\n        if (!this.isOpen()) return\n        const message = {\n            type: \"getGraph\",\n        };\n        this.ws.send(JSON.stringify(message));\n    }\n\n    deleteNodes(nodesId) {\n        console.info(\"deleteNodes\", nodesId)\n        if (!this.isOpen()) return\n        const message = {\n            type: \"deleteNodes\",\n            info: {\"nodesId\": nodesId}\n        };\n        this.ws.send(JSON.stringify(message));\n    }\n\n    reloadGraph(){\n        console.info(\"reload Graph\")\n        if (!this.isOpen()) return\n        const message = {\n            type: \"reloadGraph\",\n        };\n        this.ws.send(JSON.stringify(message));\n        //window.location.reload()\n    }\n\n\n    recalcPos() {\n        console.info(\"recalc pos\")\n        if (!this.isOpen()) return\n        const message = {\n            type: \"recalcPos\",\n        };\n        this.ws.send(JSON.stringify(message));\n    }\n}\n","\nexport default {\n    address: \"127.0.0.1:6688\" ,\n    scene: {\n        //color: 0xe9e9ff\n        color: 0xffffff\n    },\n    isDev: true,\n    render:{\n        antialias: true,\n    },\n    isShowingStats: true,\n    useStats: true,\n    useGuiControl: false,\n    useKeyboard: true,\n    isLoaded: false,\n    isMouseMoving: false,\n    isMouseOver: false,\n    maxAnisotropy: 2,\n    dpr: 1,\n    layers:{\n        0:{},\n        1:{\n            enabled:true,\n\n            clearColor: 0x000000,\n            exposure: 1,\n            strength: 0.5,\n            bloomStrength: 5,\n            bloomThreshold: 0,\n            bloomRadius: 0,\n        } ,\n        2:{},\n        3:{\n\n            enabled:false,\n            exposure: 1,\n\n            clearColor: 0x000000,\n            strength: 0.5,\n            bloomStrength: 5,\n            bloomThreshold: 0,\n            bloomRadius: 0,\n\t\t\t\tscene: \"Scene with Glow\"\n        } ,\n    },\n    nodes: {\n        material: \"fast\",\n        scale:1,\n        show: true,\n        radius: .5,\n        color: 0x0000ff,\n        edgeColor: 0x0000ff,\n        edgeWidth: 0.1,\n        roughness: 0.5,\n        opacity: 1,\n\n    },\n    edges: {\n        show: true,\n        color: 0xff,\n        //color: 0x0000ff,\n        roughness: 0.5,\n        opacity: 1,\n\n    },\n\n    fog: {\n        color: 0xffffff,\n        near: 0.0008\n    },\n    camera: {\n        fov: 40,\n        near: 2,\n        far: 1000,\n        aspect: 1,\n        posX: 0,\n        posY: 30,\n        posZ: 40\n    },\n    controls: {\n        autoRotate: false,\n        autoRotateSpeed: -0.5,\n        rotateSpeed: 0.5,\n        zoomSpeed: 0.8,\n        minDistance: 0,\n        maxDistance: 600,\n        minPolarAngle:0,\n        maxPolarAngle: Math.PI ,\n        minAzimuthAngle: -Infinity,\n        maxAzimuthAngle: Infinity,\n        enableDamping: true,\n        dampingFactor: 0.5,\n        enableZoom: true,\n        target: {\n            x: 0,\n            y: 0,\n            z: 0\n        }\n    },\n};\n","import * as THREE from \"three\";\nimport colormap from \"colormap\"\nimport alertify  from \"alertifyjs\"\n\n\nexport default class Edges {\n    constructor(scene, layer, bloomLayer) {\n        this.createEdges = this.createEdges.bind(this);\n\n        this.scene = scene;\n        this.layer = layer\n        this.bloomLayer = bloomLayer\n\n        this.numEdges = 0\n        this.edgesData = {}\n        this.instancedEdges\n\n\n    }\n\n    //deleteByNode(nodeId){\n    //}\n    updateNodePositions(positions){\n        let positionVertices = []\n        //A simple arrow function  in order to clean the code\n        const f = (arr, index) => arr.push(...[0, 1, 2].map((i)=>positions[index+i]))\n        for (let [s, t] of this.edgesData.nodes) {\n            let id_s = s*3\n            let id_t = t*3\n            //positionVertices.push(\n                //positions[id_s],\n            //)\n            f(positionVertices, id_s)\n            f(positionVertices, id_t)\n        }\n        this.instancedEdges.geometry.attributes.position.array = new Float32Array(positionVertices);\n        this.instancedEdges.geometry.attributes.position.needsUpdate = true\n        this.instancedEdges.geometry.computeBoundingSphere();\n    }\n\n    colorByProp(prop){\n        let colors = colormap({\n            colormap: \"jet\",\n            nshades: this.numEdges,\n            format: \"float\",\n            alpha: 1\n        })\n        let values = this.edgesData[prop]\n\n        const bufferColors = colors\n            .map((color, index) => [values[index], color]) // add the prop to sort by\n            .sort(([val1], [val2]) => val2 - val1) // sort by the prop data\n            .map(([, color]) => color)\n            .map(([r, g, b, alpha])=>[r, g, b, r, g, b])\n            .flat()\n\n        if (bufferColors.length != this.numEdges*6){\n            alertify.error(\"Invalid prop\")\n            alert(\"prop fail\")\n            return\n        }\n\n        this.instancedEdges.geometry.attributes.color.array = new Float32Array(bufferColors);\n        this.instancedEdges.geometry.attributes.color.needsUpdate = true\n        this.instancedEdges.material.needsUpdate = true;\n\n    }\n    changeOpacity(value){\n        this.instancedEdges.material.opacity=value;\n        //this.instancedEdges.material.blending=THREE.AdditiveBlending,c\n        this.instancedEdges.material.needsUpdate = true;\n    }\n    ressetVerticesPos(nodesData, edgesData) {\n        this.createVertices(nodesData, edgesData)\n        this.updateGeometry()\n    }\n    updateGeometry(){\n        this.edges.geometry.dispose();\n        this.edges.geometry = new THREE.BufferGeometry().setFromPoints(\n            Object.values(this.vertices)\n        );\n    }\n    //deleteEdge(edgeName){\n        //if (!(edgeName in this.segments)) return\n        //let inName = this.segments[edgeName][1]\n        //let outName = this.segments[edgeName][0]\n        //delete this.segments[edgeName]\n        //delete this.vertices[inName]\n        //delete this.vertices[outName]\n        //this.updateGeometry()\n    //}\n    createVertices(nodesData, edgesData, defaultProps){\n        this.vertices = {}\n        this.segments = {}\n        var positions = [];\n        var colors = [];\n        let r = 800\n        let color;\n\n        const f = (arr, index) => arr.push(...[0, 1, 2].map((i)=>{\n            let pos = nodesData.pos[index*3+i]\n            if(i==2)\n                pos = pos-0.01\n            return pos\n        }))\n        for (let [s, t] of edgesData.nodes) {\n\n            //let geometry = new THREE.Geometry();\n            //  let i = 0;\n            //if (i<1) return\n            const nodeInId = nodesData.id[s]\n            const nodeOutId = nodesData.id[t]\n\n            //let edgeName = `${nodeInId}-to-${nodeOutId}`\n            f(positions, t)\n            f(positions, s)\n            //let [x, y, z] = nodesData.pos[t]\n            //positions.push( x, y, z );\n            //[x, y, z] = nodesData.pos[s]\n            //positions.push( x, y, z );\n            colors.push(...nodesData.color[t])\n            colors.push(...nodesData.color[s])\n            //colors.push(0.8);\n            //colors.push(0.8);\n            //colors.push(0.8);\n            //colors.push(0.8);\n            //colors.push(0.8);\n            //colors.push(0.8);\n\n\n\n        }\n        this.positions = positions;\n        this.colors = colors;\n    }\n    deleteAllEdges(){\n        if(this.instancedEdges){\n            this.instancedEdges.geometry.dispose()\n            this.instancedEdges.material.dispose()\n            this.instancedEdges.geometry.needsUpdate = true;\n            this.instancedEdges.material.needsUpdate = true;\n            this.scene.remove(this.instancedEdges)\n            this.instancedEdges = null;\n        }\n    }\n\n    createEdges(nodesData, edgesData) {\n        this.deleteAllEdges()\n\n        this.edgesData = edgesData\n        this.numEdges = this.edgesData.nodes.length\n        this.createVertices(nodesData, edgesData)\n        var geometry = new THREE.BufferGeometry();\n        var material = new THREE.LineBasicMaterial( {\n            vertexColors: true,\n            //blending: THREE.AdditiveBlending,\n            transparent:true,\n            opacity:0.4, linewidth:1 } );\n\n        geometry.setAttribute( \"position\", new THREE.Float32BufferAttribute( this.positions, 3 ) );\n        geometry.setAttribute( 'color', new THREE.Float32BufferAttribute( this.colors, 3 ) );\n\n        geometry.computeBoundingSphere();\n\n        let edges = new THREE.Line( geometry, material );\n        this.instancedEdges = edges\n        this.scene.add( edges );\n    }\n}\n","import * as THREE from \"three\";\nimport colormap from \"colormap\"\nimport alertify  from \"alertifyjs\"\n\nimport Config from \"../../../data/config\";\n\nimport { getMarkerImgVertexShader} from \"./shaders/markerImg.vsh.js\";\nimport {markerImgFragmentShader} from \"./shaders/markerImg.fsh.js\";\n\nimport {getMarkerVertexShader} from \"./shaders/marker.vsh.js\";\nimport {getMarkerFragmentShader, availableMarkers} from \"./shaders/marker.fsh.js\";\n\n//import {fragmentShaderFixedColor, vertexShader, fragmentShader} from \"./shaders\"\n\nconst randomString = ()=>Math.random().toString(36).substring(2, 15);;\n\nexport default class Nodes {\n    constructor(scene, use2d) {\n\n        this.createNodes = this.createNodes.bind(this);\n        this.scene = scene;\n\n        this.nodesGroup = {};\n        this.comunity = '';\n        this.use2d = use2d;\n\n\n    }\n\n    //updateNodesSingle(nodesData) {\n    //for (const [nodeName, props] of Object.entries(nodesData)){\n    //let node = this.nodes[nodeName];\n    //const pos = props[\"pos\"]\n    //// let node = this.scene.getObjectByName(nodeName)\n    ////   if (node) {\n\n    //node.position.x = pos[0];\n    //node.position.y = pos[1];\n    //node.position.z = pos[2];\n    //// }\n    //}\n    //}\n    //moveNodes(pickedPos, nodesName, dr ) {\n    //for (let index = 0; index < nodesName.length; index++) {\n    ////for (const [nodeName, props] of Object.entries(nodesData)){\n    ////  let idNode = 0;\n    //let node = this.nodes[nodesName[index]];\n    //let pos = node.position\n    //// let node = this.scene.getObjectByName(nodeName)\n    ////   if (node) {\n\n    ////node.translateX(10)\n    ////node.position.x = pickedPos// pos.x+dr[0];\n    ////node.position.y = pos.y+dr[1];\n    ////node.position.z = pos.z+dr[2];\n    //// }\n    //}\n    //}\n    //deleteNode(nodeId){\n    //if (!(nodeId in this.nodes)) return\n    //this.scene.remove(this.nodes[nodeId])\n    //delete this.nodes[nodeId]\n    //}\n    setComunity(value){\n        this.comunity = Object.keys(this.nodesGroup).includes(value)? value : '';\n    }\n    getComunity(){\n        let arr = this.comunity != ''? [[this.comunity, this.nodesGroup[this.comunity]]] : Object.entries(this.nodesGroup);\n        return arr;\n    }\n    colorByField(prop){\n        for (const [nodesGroupName, nodesObj] of this.getComunity() ) {\n\n            let bufferColors = nodesObj.nodesData[prop].flat()\n            if (bufferColors.length != nodesObj.numNodes*3){\n                alertify.error(` ${prop} it's not in RGB format `)\n                return\n            }else{\n                this.updateColors(bufferColors, nodesGroupName);\n            }\n\n        }\n    }\n\n    updateColors(colors, nodesGroupName){\n\n        let nodesObj = this.nodesGroup[nodesGroupName];\n        if (nodesObj.fixedColor){\n            let fixedColor = false;\n            nodesObj.mesh.material.vertexShader = getMarkerVertexShader(nodesObj.fixedNodeSize, fixedColor, nodesGroupName);\n\n            nodesObj.mesh.geometry.addAttribute(\"bufferColors\",\n                new THREE.InstancedBufferAttribute(new Float32Array(colors), 3, false));\n\n            nodesObj.fixedColor = fixedColor;\n            delete nodesObj.uniforms.bufferColors;\n            nodesObj.mesh.geometry.needsUpdate = true;\n\n        }else{\n            nodesObj.mesh.geometry.attributes.bufferColors.array = new Float32Array(colors);\n            nodesObj.mesh.geometry.attributes.bufferColors.needsUpdate = true\n\n        }\n        nodesObj.mesh.material.needsUpdate = true;\n\n\n    }\n    colorByProp(prop){\n\n        for (const [nodesGroupName, nodesObj] of this.getComunity() ) {\n\n            let colors = colormap({\n                colormap: \"jet\",\n                nshades: nodesObj.numNodes,\n                format: \"float\",\n                alpha: 1\n            })\n            let values = nodesObj.nodesData[prop]\n\n            const bufferColors = colors\n                .map((color, index) => [values[index], color]) // add the prop to sort by\n                .sort(([val1], [val2]) => val2 - val1) // sort by the prop data\n                .map(([, color]) => color)\n                .map(([r, g, b, alpha])=>[r, g, b])\n                .flat()\n            this.updateColors(bufferColors, nodesGroupName);\n\n        }\n    }\n    updateColor(color, nodesGroupName){\n\n        let nodesObj = this.nodesGroup[nodesGroupName];\n        if (nodesObj.fixedColor){\n            nodesObj.uniforms.bufferColors.value = color;\n            //nodesObj.mesh.geometry.needsUpdate = true;\n        }else{\n            let fixedColor = true;\n            nodesObj.uniforms.bufferColors = {\n                type: 'vec3',\n                value: color\n            }\n            nodesObj.mesh.geometry.deleteAttribute('bufferColors');\n            nodesObj.mesh.material.vertexShader = getMarkerVertexShader(nodesObj.fixedNodeSize, fixedColor, nodesGroupName);\n\n            nodesObj.fixedColor = true;\n            nodesObj.mesh.geometry.needsUpdate = true;\n            nodesObj.fixedColor = true;\n        }\n        nodesObj.mesh.material.needsUpdate = true;\n\n    }\n    changeColor(colorHEX){\n\n        for (const [nodesGroupName, nodesObj] of this.getComunity() ) {\n            let color = new THREE.Color(colorHEX);\n            this.updateColor(color, nodesGroupName);\n\n        }\n    }\n    //size gui interaction\n    sizeByField(prop){\n\n        for (const [nodesGroupName, nodesObj] of this.getComunity() ) {\n\n            let bufferNodeSize = nodesObj.nodesData[prop].flat()\n            if (bufferNodeSize.length != nodesObj.numNodes){\n                alertify.error(` ${prop} it's not in a valid format `)\n                return\n            }else{\n                this.updateSizes(bufferNodeSize, nodesGroupName);\n            }\n\n        }\n    }\n\n    updateSizes(sizes, nodesGroupName){\n\n        let nodesObj = this.nodesGroup[nodesGroupName];\n        let sMin = Math.min(...sizes)\n        let sMax = Math.max(...sizes)\n        sizes = sizes.map((s)=> (s-sMin)/(sMax-sMin))\n        if (nodesObj.fixedNodeSize){\n            let fixedNodeSize = false;\n            nodesObj.mesh.material.vertexShader = getMarkerVertexShader(fixedNodeSize, nodesObj.fixedColor, nodesGroupName);\n\n\n            let sizesBuffer = new THREE.InstancedBufferAttribute(new Float32Array(sizes), 1, true);\n            nodesObj.mesh.geometry.addAttribute(\"bufferNodeSize\",\n                sizesBuffer);\n\n            nodesObj.fixedNodeSize = fixedNodeSize;\n            delete nodesObj.uniforms.bufferNodeSizes;\n            nodesObj.mesh.geometry.needsUpdate = true;\n\n        }else{\n            nodesObj.mesh.geometry.attributes.bufferNodeSizes.array = new Float32Array(sizes);\n            nodesObj.mesh.geometry.attributes.bufferNodeSizes.needsUpdate = true\n\n        }\n        nodesObj.mesh.material.needsUpdate = true;\n\n\n    }\n    updateSize(size, nodesGroupName){\n\n        let nodesObj = this.nodesGroup[nodesGroupName];\n        if (nodesObj.fixedNodeSize){\n            nodesObj.uniforms.bufferNodeSizes.value = color;\n            //nodesObj.mesh.geometry.needsUpdate = true;\n        }else{\n            let fixedNodeSize = true;\n            nodesObj.uniforms.bufferNodeSizes = {\n                type: 'vec3',\n                value: color\n            }\n            nodesObj.mesh.geometry.deleteAttribute('bufferNodeSizes');\n            nodesObj.mesh.material.vertexShader = getMarkerVertexShader(nodesObj.fixedNodeSize, fixedNodeSize, nodesGroupName);\n            nodesObj.fixedNodeSize = true;\n            nodesObj.mesh.geometry.needsUpdate = true;\n            nodesObj.fixedNodeSize = true;\n        }\n        nodesObj.mesh.material.needsUpdate = true;\n\n    }\n\n\n    // end size gui itneraction\n    changeRadius(value){\n        this.instancedNodes.geometry.attributes.bufferRadius = value;\n        this.instancedNodes.material.needsUpdate = true;\n    }\n\n    changeEdgeColor(color){\n        for (const [nodesGroupName, nodesObj] of this.getComunity() ) {\n        //for (let nodesObj of this.nodesGroup){\n            nodesObj.uniforms.edgeColor.value = new THREE.Color(color);\n            nodesObj.mesh.geometry.needsUpdate = true;\n        }\n    }\n    changeEdgeWidth(value){\n\n        for (const [nodesGroupName, nodesObj] of this.getComunity() ) {\n        //for (let nodesObj of this.nodesGroup){\n            nodesObj.uniforms.edgeWidth.value = value;\n            nodesObj.mesh.geometry.needsUpdate = true;\n        }\n    }\n\n    changeOpacity(value){\n\n        for (const [nodesGroupName, nodesObj] of this.getComunity() ) {\n        //for (let nodesObj of this.nodesGroup){\n            nodesObj.uniforms.bufferOpacity.value = value;\n            nodesObj.mesh.geometry.needsUpdate = true;\n        }\n    }\n    changeScale(value){\n\n        for (const [nodesGroupName, nodesObj] of this.getComunity() ) {\n        //for (let nodesObj of this.nodesGroup){\n            nodesObj.uniforms.bufferNodeScale.value = value;\n            nodesObj.mesh.geometry.needsUpdate = true;\n            nodesObj.mesh.material.needsUpdate = true;\n        }\n    }\n\n    updateNodePositions(positions){\n        this.instancedNodes.geometry.attributes.bufferNodePositions.array = new Float32Array(positions);\n        this.instancedNodes.geometry.attributes.bufferNodePositions.needsUpdate = true\n    }\n\n\n\n    deleteAllNodes(){\n        for (const [key, nodesObj] of Object.entries(this.nodesGroup)) {\n            nodesObj.mesh.geometry.dispose();\n            nodesObj.mesh.material.dispose();\n            nodesObj.mesh.geometry.needsUpdate = true;\n            nodesObj.mesh.material.needsUpdate = true;\n            this.scene.remove(nodesObj.mesh);\n            delete this.nodesGroup[key];\n        }\n    }\n    createNodes(nodesData,  clear=false) {\n        let nodesGroupName;\n        if (clear){\n            nodesGroupName = 'main';\n        }else{\n            nodesGroupName = nodesData.props.includes('name')? nodesData.name : randomString();\n        }\n        console.info(\"Creating nodes\", nodesGroupName);\n\n\n        let what = 2;\n        what = what || 'points';\n        let nodesObj = {}\n\n        const numNodes = Object.keys(nodesData.id).length\n        const fixedNodeSize = nodesData.props.includes(\"size2\") == false;\n        const fixedColor = nodesData.props.includes(\"color\") == false;\n\n\n               //if (clear) this.deleteAllNodes();\n\n\n        let bufferNodePositions = nodesData.pos\n\n        let uniforms = {\n            bufferOpacity: {\n                type: 'f', // a float\n                value: 1\n            },\n            bufferNodeScale:{\n                type: 'f',\n                value: 1\n            },\n        };\n        let bufferNodeSize;\n        if (fixedNodeSize){\n            console.info(\"Fixed Node Size\")\n            uniforms.bufferNodeSize = {\n                type: 'f',\n                value: 1\n            }\n        }\n        if (fixedColor){\n            console.info(\"Fixed Color\")\n            uniforms.bufferColors = {\n                type: 'vec3',\n                value: new Float32Array([0.8, 0.0, 0.8])\n            }\n\n        }\n\n        let nodesMesh;\n\n        let material;\n        //const marker = '2'\n        //const markerImg = 'circle';\n        //const markerImg = 'ball';\n        //const markerImg = 'disc';\n        //const markerImg = 'spark1';\n        //const markerImg = 'lensflare';\n\n        let instancedGeometry = new THREE.InstancedBufferGeometry();\n        //if (marker=='1'){\n            ////\n            //let markerGeometry = new  THREE.PlaneBufferGeometry(1, 1, 1)\n            ////let circleGeometry = new  THREE.CircleBufferGeometry(1, 6)\n            //instancedGeometry.index = markerGeometry.index;\n            //instancedGeometry.attributes = markerGeometry.attributes;\n            //this.uniforms.map = { value: new THREE.TextureLoader().load( `textures/sprites/${markerImg}.png` ) }\n            //this.uniforms.useDiffuse2Shadow = {\n                //type: 'f',\n                //value: 0,\n            //}\n            //this.uniforms.edgeColor = {\n                //type: 'vec3',\n                //value: new Float32Array([0.8, 0.8, 0.8])\n            //}\n\n\n            ////instancedGeometry = instancedGeometry.copy(circleGeometry);\n            //material = new THREE.RawShaderMaterial( {\n                ////vertexShader: markerVertexShader,\n                //vertexShader: getMarkerImgVertexShader(fixedNodeSize, fixedColor),\n                //fragmentShader: markerImgFragmentShader,\n                //uniforms: this.uniforms,\n                //transparent: true,\n                ////blending: THREE.AdditiveBlending,\n                //blending: THREE.NormalBlending,\n                ////depthTest: true,\n                ////depthTest: false,\n                //depthWrite: true,\n            //} );\n\n        //}else{\n            //let symbol = \"^\";\n            const randomChoice = (arr) => arr[Math.floor(arr.length * Math.random())];\n\n            //let symbol= nodesData.props.includes(\"marker\") == false ? randomChoice(availableSymbols): nodesData.marker;\n            let marker = nodesData.props.includes(\"marker\") == false ? randomChoice(availableMarkers): nodesData.marker;\n            marker = '3do'\n            let markerGeometry = new  THREE.PlaneBufferGeometry(1, 1, 1)\n\n            instancedGeometry.index = markerGeometry.index;\n            instancedGeometry.attributes = markerGeometry.attributes;\n\n            uniforms.edgeColor = {\n                type: 'vec3',\n                value: new THREE.Color(Config.nodes.edgeColor),\n            }\n            uniforms.edgeWidth = {\n                type: 'f',\n                value: 0.1,\n            }\n            material = new THREE.RawShaderMaterial( {\n                vertexShader: getMarkerVertexShader(fixedNodeSize, fixedColor, nodesGroupName),\n                fragmentShader: getMarkerFragmentShader(marker, nodesGroupName),\n                uniforms: uniforms,\n                transparent: true,\n                //blending: THREE.AdditiveBlending,\n                //blending: THREE.NormalBlending,\n                depthTest: !this.use2d,\n                //depthTest: false,\n                depthWrite: true,\n            } );\n\n\n        //}\n\n        if(fixedNodeSize == false)\n            instancedGeometry.addAttribute(\n                \"bufferNodeSize\",\n                new THREE.InstancedBufferAttribute(new Float32Array(nodesData.size), 1, true)\n            );\n        if(fixedColor == false)\n            instancedGeometry.addAttribute(\"bufferColors\",\n                new THREE.InstancedBufferAttribute(new Float32Array(nodesData.color.flat()), 3, false));\n\n        instancedGeometry.addAttribute(\"bufferNodePositions\",\n            new THREE.InstancedBufferAttribute(new Float32Array(bufferNodePositions), 3, false)\n        );\n\n\n        nodesMesh = new THREE.Mesh(instancedGeometry, material);\n\n        this.scene.add(nodesMesh);\n\n        nodesObj.mesh = nodesMesh;\n        nodesObj.nodesData = nodesData;\n        nodesObj.uniforms = uniforms;\n        nodesObj.marker = marker;\n        nodesObj.fixedNodeSize = fixedNodeSize;\n        nodesObj.fixedColor = fixedColor;\n        nodesObj.numNodes = numNodes;\n\n\n        this.nodesGroup[nodesGroupName] = nodesObj;\n\n    }\n\n\n}\n","//const sdfFunctions = `\n//vec3 sdfCircle(vec2 p, float s){\n    //float edgeWidth = 1/2.;\n    //float minSdf = 0.5;\n    //float sdf = -length(p) + s;\n    //return vec3(sdf, minSdf, edgeWidth);\n//}\n\n//vec3 sdfSquare(vec2 p, float s){\n //return vec3(sdf, minSdf, edgeWidth);\n//}\n\n//vec3 sdfDiamond(vec2 p, float s){\n //return vec3(sdf, minSdf, edgeWidth);\n//}\n\n//vec3 sdfTriangle(vec2 p, float s){\n //return vec3(sdf, minSdf, edgeWidth);\n//}\n\n//vec3 sdfPentagon(vec2 p, float s){\n //return vec3(sdf, minSdf, edgeWidth);\n//}\n\n//vec3 sdfHexagon(vec2 p, float s){\n //return vec3(sdf, minSdf, edgeWidth);\n//}\n\n//vec3 sdfS6(vec2 p, float s){\n //return vec3(sdf, minSdf, edgeWidth);\n//}\n\n//vec3 sdfProduct(vec2 p, float s){\n //return vec3(sdf, minSdf, edgeWidth);\n//}\n\n//vec3 sdfCross(vec2 p, float s){\n //return vec3(sdf, minSdf, edgeWidth);\n//}\n\n//`\nconst distFunctions = {\n    'o': `\n        edgeWidth = edgeWidth/2.;\n        float minSdf = 0.5;\n        sdf = -length(p) + s;\n    `,\n    's': `\n\n        edgeWidth = edgeWidth/2.;\n        float minSdf = 0.5/2.0;\n        vec2 d = abs(p) - vec2(s, s);\n        sdf = -length(max(d,0.0)) - min(max(d.x,d.y),0.0);\n    `,\n    'd':`\n\n        edgeWidth = edgeWidth/4.;\n        float minSdf = 0.5/2.0;\n        vec2 b  = vec2(s, s/2.0);\n        vec2 q = abs(p);\n        float h = clamp((-2.0*ndot(q,b)+ndot(b,b))/dot(b,b),-1.0,1.0);\n        float d = length( q - 0.5*b*vec2(1.0-h,1.0+h) );\n        sdf = -d * sign( q.x*b.y + q.y*b.x - b.x*b.y );\n    `,\n    '^':`\n        float l = s/1.5;\n        float minSdf = 1000.0;\n        float k = sqrt(3.0);\n        p.x = abs(p.x) - l;\n        p.y = p.y + l/k;\n        if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n        p.x -= clamp( p.x, -2.0*l, 0.0 );\n        sdf = length(p)*sign(p.y);\n    `,\n    'p':`\n        edgeWidth = edgeWidth/4.;\n        float minSdf = 0.5/2.0;\n        float r = s/2.0;\n        const vec3 k = vec3(0.809016994,0.587785252,0.726542528);\n        p.x = abs(p.x);\n        p -= 2.0*min(dot(vec2(-k.x,k.y),p),0.0)*vec2(-k.x,k.y);\n        p -= 2.0*min(dot(vec2( k.x,k.y),p),0.0)*vec2( k.x,k.y);\n        p -= vec2(clamp(p.x,-r*k.z,r*k.z),r);\n        sdf = -length(p)*sign(p.y);\n    `,\n    'h':`\n\n        edgeWidth = edgeWidth/4.;\n        float minSdf = 0.5/2.0;\n        float r = s/2.0;\n        const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n        p = abs(p);\n        p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n        p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n        sdf = -length(p)*sign(p.y);\n    `,\n    's6':`\n\n        float minSdf = 0.5/2.0;\n        edgeWidth = edgeWidth/4.;\n        float r = s/2.0;\n        const vec4 k = vec4(-0.5,0.8660254038,0.5773502692,1.7320508076);\n        p = abs(p);\n        p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n        p -= 2.0*min(dot(k.yx,p),0.0)*k.yx;\n        p -= vec2(clamp(p.x,r*k.z,r*k.w),r);\n        sdf = -length(p)*sign(p.y);\n    `,\n    'x':`\n\n        edgeWidth = edgeWidth/8.;\n        float minSdf = 0.5/4.0;\n\n        float r = s/4.0;\n        float w = 0.5;\n        p = abs(p);\n        sdf = -length(p-min(p.x+p.y,w)*0.5) + r;\n    `,\n    '+':`\n\n        edgeWidth = edgeWidth/4.;\n\n        float minSdf = 0.5/2.0;\n        float r = s/15.0; //corner radius\n        vec2 b = vec2(s/1.0, s/3.0); //base , size\n        //vec2 b = vec2(r, r);\n        p = abs(p); p = (p.y>p.x) ? p.yx : p.xy;\n        vec2  q = p - b;\n        float k = max(q.y,q.x);\n        vec2  w = (k>0.0) ? q : vec2(b.y-p.x,-k);\n        sdf = -sign(k)*length(max(w,0.0)) - r;\n    `\n\n}\nfunction getDistFunction(marker){\n    const exist = Object.keys(distFunctions).includes(marker);\n    if (!exist)\n        marker = 'o'\n\n    return distFunctions[marker]\n}\n\nfunction getShading(marker){\n    let shadingStr = ''\n    if (marker != '3do')\n        return '';\n\n    shadingStr = `\n        // shading\n\n        vec3 normal = normalize(vec3(p.xy, sdf));\n        vec3 direction = normalize(vec3(1.0, 1.0, 1.0));\n        float diffuse = max(0.0, dot(direction, normal));\n        float specular = pow(diffuse, 25.0);\n        color = vec3(max(diffuse*color, specular*vec3(1.0)));\n    `\n    return shadingStr;\n\n\n}\n\n\nexport function getMarkerFragmentShader(marker, nodesGroupName='main'){\n    console.info(marker)\n    return  `\n    precision highp float;\n\n    #define SHADER_NAME MarkerNode_${nodesGroupName}\n\n    varying vec3 vColor;\n    varying float vOpacity;\n    varying float vEdgeWidth;\n    varying vec3 vPos;\n    varying vec3 vEdgeColor;\n\n    float ndot(vec2 a, vec2 b ) {\n        return a.x*b.x - a.y*b.y;\n    }\n    void main() {\n\n        vec3 color = vColor;\n        vec3 edgeColor = vEdgeColor;\n        float edgeWidth = vEdgeWidth;\n        vec2 p = vPos.xy;\n        float opacity = vOpacity;\n\n        float s = 0.5;\n        float sdf = 0.0;\n        ${getDistFunction(marker)}\n        if (sdf<0.0) discard;\n\n        float edge0 = 0.0;\n        float edge1 = minSdf;\n        float opacity2 = opacity;\n        //if (opacity<1.0) opacity2 =  clamp((sdf - edge0) / (edge1 - edge0), 0.01, opacity) + 0.1;\n        ${getShading(marker)}\n\n        vec4 rgba = vec4(  color, opacity2 );\n\n\n        if (edgeWidth > 0.0){\n            if (sdf < edgeWidth)  rgba  = vec4(edgeColor, 1.0);\n        }\n\n        gl_FragColor = rgba;\n\n    }\n    `\n}\n\nexport const availableMarkers = ['o', '3do', 's', 'd', '^' , 'p', 'h', 's6', '+', 'x'];\n","\nexport function getMarkerVertexShader(fixedNodeSize=false, fixedColor=false, nodesGroupName='main'){\n    console.info(\"Get Marker Vertex Shader\");\n    let markerVertexShader = `\n\n    #define SHADER_NAME MarkerNode_${nodesGroupName}\n\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n    uniform mat4 viewMatrix;\n    attribute vec3 position;\n\n    attribute vec3 bufferNodePositions;\n    `\n\n    if (fixedNodeSize){\n        markerVertexShader += 'uniform float bufferNodeSize;'\n    }else{\n        markerVertexShader += 'attribute float bufferNodeSize;'\n    }\n    if (fixedColor){\n        markerVertexShader += 'uniform vec3 bufferColors;'\n    }else{\n\n        markerVertexShader += 'attribute vec3 bufferColors;'\n    }\n\n    markerVertexShader += `\n\n    uniform float bufferOpacity;\n    uniform float bufferNodeScale;\n    uniform float edgeWidth;\n    uniform vec3 edgeColor;\n\n    varying vec3 vColor;\n    varying vec3 vEdgeColor;\n    varying vec3 vPos;\n    varying float vOpacity;\n    varying float vEdgeWidth;\n\n    void main() {\n\n        vec4 viewNodePos = modelViewMatrix * vec4( bufferNodePositions, 1.0 );\n\n        vec4 mvPosition = viewNodePos +  vec4(position*bufferNodeScale*bufferNodeSize, 0);\n\n        gl_Position = projectionMatrix * mvPosition;\n\n\n        vColor = bufferColors;\n        vOpacity = bufferOpacity;\n        vPos = position;\n        vEdgeWidth = edgeWidth;\n        vEdgeColor = edgeColor;\n    }\n\n    `\n    return markerVertexShader;\n\n}\n\n","export const markerImgFragmentShader = `\nprecision highp float;\n#define SHADER_NAME MarkerImgNode\nuniform sampler2D map;\n\nvarying vec2 vUv;\n\nvarying vec3 vColor;\nvarying float vOpacity;\nvarying float vUseDiffuse2Shadow;\n\nvoid main() {\n\n    vec3 color = vColor;\n    vec4 diffuseColor = texture2D( map, vUv );\n\n    float opacity = diffuseColor.w*vOpacity;\n    gl_FragColor = vec4(\n        (1.0 - vUseDiffuse2Shadow)*color + vUseDiffuse2Shadow*diffuseColor.xyz*color,\n        opacity\n    );\n    if (diffuseColor.w< 0.4 ) discard;\n\n}\n`\n","\nexport default function getMarkerImgVertexShader(fixedNodeSize=false, fixedColor=false){\n    let markerVertexShader = `\n    precision highp float;\n\n    #define SHADER_NAME MarkerImgNode\n\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n    uniform mat4 viewMatrix;\n    attribute vec3 position;\n    attribute vec2 uv;\n\n    attribute vec3 bufferNodePositions;\n    `\n\n    if (fixedNodeSize){\n        markerVertexShader += 'uniform float bufferNodeSize;'\n    }else{\n\n        markerVertexShader += 'attribute float bufferNodeSize;'\n    }\n    if (fixedColor){\n        markerVertexShader += 'uniform vec3 bufferColors;'\n    }else{\n\n        markerVertexShader += 'attribute vec3 bufferColors;'\n    }\n\n\n    markerVertexShader += `\n\n    uniform float bufferOpacity;\n    uniform float bufferNodeScale;\n    uniform float useDiffuse2Shadow;\n\n    varying vec3 vColor;\n    varying vec2 vUv;\n    varying float vUseDiffuse2Shadow;\n    varying float vOpacity;\n\n    void main() {\n\n        vec4 viewNodePos = modelViewMatrix * vec4( bufferNodePositions, 1.0 );\n\n        vec4 mvPosition = viewNodePos +  vec4(position*bufferNodeScale*bufferNodeSize, 0);\n\n        gl_Position = projectionMatrix * mvPosition;\n\n        vUv = uv;\n\n        vColor = bufferColors;\n        vOpacity = bufferOpacity;\n        vUseDiffuse2Shadow = useDiffuse2Shadow;\n    }\n\n    `\n    return markerVertexShader;\n\n}\n\n","import * as THREE from 'three';\n\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass.js';\nimport { CopyShader } from 'three/examples/jsm/shaders/CopyShader.js';\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader.js';\n\nimport alertify from 'alertifyjs';\n\nimport Config from '../../../data/config';\n\nimport Stats from './../../helpers/stats';\n\nfunction dataURIToBlob( dataURI ) {\n    const binStr = window.atob( dataURI.split( ',' )[1] );\n    const len = binStr.length;\n    const arr = new Uint8Array( len );\n    for ( let i = 0; i < len; i++ ) {\n        arr[i] = binStr.charCodeAt( i );\n    }\n    return new window.Blob( [arr] );\n}\n\nfunction saveDataURI( name, dataURI ) {\n    const blob = dataURIToBlob( dataURI );\n\n    // force download\n    const link = document.createElement( 'a' );\n    link.download = name;\n    link.href = window.URL.createObjectURL( blob );\n    link.onclick = () => {\n        window.setTimeout( () => {\n            window.URL.revokeObjectURL( blob );\n            link.removeAttribute( 'href' );\n        }, 500 );\n\n    };\n    link.click();\n}\n\nfunction defaultFileName (ext) {\n    const str = `${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}${ext}`;\n    return str.replace(/\\//g, '-').replace(/:/g, '.');\n}\n\n\nexport default class Renderer {\n    constructor(scene, controls, container, canvas, camera, appState ) {\n        this.scene = scene;\n        this.controls = controls;\n        this.canvas = canvas;\n        this.container = container;\n        this.camera = camera\n        this.appState = appState\n\n        //renderer.toneMapping = THREE.ReinhardToneMapping;\n\n        // Create WebGL render\n        this.renderer = new THREE.WebGLRenderer(\n            {\n                canvas: canvas,\n                antialias: Config.render.antialias,\n                preserveDrawingBuffer: true,\n                alpha:true\n            }\n        );\n\t    this.renderer.autoClear = false;\n        if(Config.useStats) {\n            this.stats = new Stats(this.renderer);\n            this.stats.setUp();\n        }\n\n\n        this.renderer.setPixelRatio(window.devicePixelRatio); // For retina\n\n\n        //this.renderer.shadowMap.enabled = false;\n        //this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\n        // Get anisotropy for textures\n        Config.maxAnisotropy = this.renderer.getMaxAnisotropy();\n\n        // Initial size update set to canvas canvas\n        //\n\n        let fxaaPass = new ShaderPass( FXAAShader );\n\n        var pixelRatio = this.renderer.getPixelRatio();\n\n        var renderPass = new RenderPass( scene, camera );\n        fxaaPass.material.uniforms[ 'resolution' ].value.x = 1 / ( this.canvas.offsetWidth * pixelRatio );\n        fxaaPass.material.uniforms[ 'resolution' ].value.y = 1 / ( this.canvas.offsetHeight * pixelRatio );\n        //fxaaPass.material.uniforms[ 'resolution' ].value.x = 1 / 1000000;\n        //fxaaPass.material.uniforms[ 'resolution' ].value.y = 1 / 1000000;\n\n        this.fxaaPass = fxaaPass\n\n        this.composer = new EffectComposer( this.renderer );\n        this.composer.addPass( renderPass );\n        this.composer.addPass( fxaaPass );\n\n        //\n\n\n        this.updateSize(this.canvas.offsetWidth,this.canvas.offsetHeight);\n        // Listeners\n        document.addEventListener('DOMContentLoaded', () => this.updateSize(), false);\n        window.addEventListener('resize', () => this.updateSize(), false);\n\n        this.controls.addEventListener('change', ()=>this.render());\n        this.render = this.render.bind(this)\n        this.updateSize = this.updateSize.bind(this)\n\n        this.takeScreenshot = this.takeScreenshot.bind(this)\n        const btnSave = document.getElementById(\"btnSaveImage\");\n        if(btnSave)\n            btnSave.addEventListener(\"click\",  event=>this.takeScreenshot())\n\n\n        var renderPass = new RenderPass( scene, camera );\n\n\n    }\n\n    setCameraAspect(widthRender, heightRender, keepPos=true) {\n\n        const canvas = this.canvas;\n        //const widthRender = window.innerWidth\n        //const heightRender = window.innerHeight\n        //\n        if(keepPos){\n            const aspect = widthRender / heightRender\n            const change = this.appState.originalAspect/aspect\n\n            const newSize = 1 * change;\n            this.camera.left = -aspect * newSize / 2;\n            this.camera.right = aspect * newSize  / 2;\n            this.camera.top = newSize / 2;\n            this.camera.bottom = -newSize / 2;\n        }\n        this.camera.aspect = widthRender / heightRender;\n\n        this.camera.updateProjectionMatrix();\n    }\n\n    updateSize(widthRender, heightRender, keepPos=true) { //if (this.appState.takingScreenshot) return;\n        widthRender = widthRender || this.container.clientWidth\n        heightRender= heightRender ||this.container.clientHeight\n\n        this.setCameraAspect(widthRender, heightRender, keepPos)\n        this.renderer.setSize(widthRender, heightRender, );\n\n        this.composer.setSize( widthRender, heightRender );\n\n        var pixelRatio = this.renderer.getPixelRatio();\n\n        this.fxaaPass.material.uniforms[ 'resolution' ].value.x = 1 / ( widthRender * pixelRatio );\n        this.fxaaPass.material.uniforms[ 'resolution' ].value.y = 1 / ( heightRender * pixelRatio );\n        //this.appState.originalAspect  = aspect\n        this.render()\n        //const pixelRatio = window.devicePixelRatio;\n        //const width  = widthRender  * pixelRatio | 0;\n        //const height = heightRender * pixelRatio | 0;\n        //const needResize = canvas.width !== width || canvas.height !== height;\n\n        //if (needResize) {\n\n        //this.renderer.setSize(width, height, );\n        //this.camera.aspect = widthRender / heightRender;\n        //this.camera.updateProjectionMatrix();\n        //}\n        //this.camera.aspect = window.innerWidth / window.innerHeight;\n        //this.camera.updateProjectionMatrix();\n\n        //this.renderer.setSize( window.innerWidth, window.innerHeight );\n\n        //this.camera.aspect = this.canvas.clientWidth / this.canvas.clientHeight;\n        //this.camera.updateProjectionMatrix();\n        //if (resizeRendererToDisplaySize(renderer)) {\n        //this.camera.aspect = this.canvas.clientWidth / this.canvas.clientHeight;\n        //this. camera.updateProjectionMatrix();\n\n        ////}\n        //this.renderer.setSize(this.canvas.clientWidth, this.canvas.clientHeight);\n\n    }\n\n    render() {\n        // Renders scene to canvas target\n        // this.pickHelper.pick( scene, camera, 0)\n\n        if(Config.useStats)\n            Stats.start();\n\n        //this.controls.update();\n        //this.renderer.render(this.scene, this.camera);\n        this.composer.render();\n        if(Config.useStats)\n            Stats.end();\n\n\n    }\n    delete(){\n        this.render = ()=>0;\n        document.removeEventListener('DOMContentLoaded', () => this.updateSize(), false);\n        window.removeEventListener('resize', () => this.updateSize(), false);\n        const btnSave = document.getElementById(\"btnSaveImage\");\n        if(btnSave)\n            btnSave.removeEventListener(\"click\",  event=>this.takeScreenshot())\n\n    }\n    stop(){\n        //const dataURI = this.getURI(widthImage, heightImage, saveWithTransparency);\n        this.delete()\n    }\n    getURI(widthImage, heightImage, saveWithTransparency){\n        widthImage = widthImage || this.container.clientWidth\n        heightImage= heightImage ||this.container.clientHeight\n\n\n        this.setCameraAspect(widthImage, heightImage, false)\n        // set camera and renderer to desired screenshot dimension\n        //this.camera.aspect = widthImage / heightImage;\n        //this.camera.updateProjectionMatrix();\n\n        const color = this.scene.background;\n        if(saveWithTransparency){\n            this.renderer.setClearColor( 0x000000, 0 );\n            this.scene.background = null;\n        }\n        this.renderer.setSize(  widthImage, heightImage );\n\n        this.renderer.render( this.scene, this.camera, null, false );\n\n        const dataURI = this.canvas.toDataURL( 'image/png', 1.0 );\n\n        if(saveWithTransparency)\n            this.scene.background = color;\n        this.appState.takingScreenshot = false\n\n        this.updateSize();\n\n        return dataURI\n    }\n    takeScreenshot(){\n\n        $('#saveImageModal').modal(\"hide\")\n        this.appState.takingScreenshot = true\n        this.appState.stopChanges = true\n        const widthImage = parseInt(document.getElementById(\"widthSaveImage\").value)\n        const heightImage = parseInt(document.getElementById(\"heightSaveImage\").value)\n\n        const saveWithTransparency = document.getElementById(\"saveWithTransparency\").checked\n\n\n        const DataURI = this.getURI(widthImage, heightImage, saveWithTransparency);\n        saveDataURI(defaultFileName( '.png' ), DataURI);\n\n\n\n    }\n}\n","// Local vars for rStats\nlet rS, bS, glS, tS;\n\nexport default class Stats {\n  constructor(renderer) {\n    this.renderer = renderer;\n  }\n\n  setUp() {\n    bS = new BrowserStats();\n    glS = new glStats();\n    tS = new threeStats(this.renderer);\n\n    rS = new rStats({\n      CSSPath: './css/',\n      userTimingAPI: true,\n      values: {\n        frame: { caption: 'Total frame time (ms)', over: 16, average: true, avgMs: 100 },\n        fps: { caption: 'Framerate (FPS)', below: 30 },\n        calls: { caption: 'Calls (three.js)', over: 3000 },\n        raf: { caption: 'Time since last rAF (ms)', average: true, avgMs: 100 },\n        rstats: { caption: 'rStats update (ms)', average: true, avgMs: 100 },\n        texture: { caption: 'GenTex', average: true, avgMs: 100 }\n      },\n      groups: [\n        { caption: 'Framerate', values: ['fps', 'raf'] },\n        { caption: 'Frame Budget', values: ['frame', 'texture', 'setup', 'render'] }\n      ],\n      fractions: [\n        { base: 'frame', steps: ['texture', 'setup', 'render'] }\n      ],\n      plugins: [bS, tS, glS]\n    });\n  };\n\n  static start() {\n    rS('frame').start();\n    glS.start();\n\n    rS('rAF').tick();\n    rS('FPS').frame();\n\n    rS('render').start();\n  };\n\n  static end() {\n    rS('render').end(); // render finished\n    rS('frame').end(); // frame finished\n\n    // Local rStats update\n    rS('rStats').start();\n    rS().update();\n    rS('rStats').end();\n  };\n}\n","import * as THREE from \"three\";\nimport * as dat from 'dat.gui';\n//import Config from '../../data/config';\n\n\nfunction updateDropdown(target, list){\n    let innerHTMLStr = \"\";\n    for(var i=0; i<list.length; i++){\n        var str = \"<option value='\" + list[i] + \"'>\" + list[i] + \"</option>\";\n        innerHTMLStr += str;\n    }\n\n    if (innerHTMLStr != \"\") target.domElement.children[0].innerHTML = innerHTMLStr;\n}\n\n// Manages all dat.GUI interactions\nexport default class DatGUI {\n    constructor(\n        idCanvasHTML,\n        scene, renderer,\n        camera,\n        nodes0, edges0,\n        Config,\n        appState) {\n        const gui = new dat.GUI({autoPlace:false, name:idCanvasHTML});\n        this.gui = gui\n\n        //container.appendChild(gui.domElement);\n        document.getElementById(`datGui${idCanvasHTML}`).appendChild(gui.domElement);\n        const render = renderer.render;\n        //canvas.appendChild(gui.domElement);\n        //this.camera = main.camera.threeCamera;\n        //this.controls = main.controls.threeControls;\n        //this.light = main.light;\n\n        /* Scene */\n        let sceneFolder = gui.addFolder('Scene');\n\n        sceneFolder.addColor(Config.scene, \"color\").name('Color').onChange((color) => {\n            scene.background = new THREE.Color(color)\n            render()\n        });\n\n        sceneFolder.open()\n        /* Nodes */\n        let nodesFolder = gui.addFolder('Nodes');\n        this.comunityField = nodesFolder.add(appState, \"comunityField\", appState.comunityField)\n            .name(\"Comunity\")\n            .onChange(function(value) {\n            nodes0.setComunity(value)\n        });\n        nodesFolder.add( Config.nodes, 'show' ).onChange( function ( value ) {\n            for (let [nodeName, node] of Object.entries(nodes0.nodes)){\n                node.visible=value;\n            }\n\n            Config.nodes.show = value\n            render();\n        } );\n\n        nodesFolder.addColor(Config.nodes, \"color\").name('Color').onChange((color) => {\n            nodes0.changeColor(color)\n            render()\n        });\n        this.sizeField = nodesFolder.add(appState, \"defaultProps\", appState.defaultProps)\n            .name(\"Size Field\")\n            .onChange(function(value) {\n            nodes0.sizeByField(value)\n        });\n        nodesFolder.add(Config.nodes, 'scale', 1, 10, 0.1).name('Scale').onChange((value) => {\n            nodes0.changeScale(value)\n            //node.material.opacity=value;\n        });\n        nodesFolder.addColor(Config.nodes, \"edgeColor\").name('Edge Color').onChange((color) => {\n            nodes0.changeEdgeColor(color)\n            render()\n        });\n        nodesFolder.add(Config.nodes, 'edgeWidth', 0.0, 1, 0.01).name('Edge Width').onChange((value) => {\n            nodes0.changeEdgeWidth(value)\n            render()\n            //node.material.opacity=value;\n        });\n        nodesFolder.add(Config.nodes, 'opacity', 0, 1).name('Opacity').onChange((value) => {\n            nodes0.changeOpacity(value)\n            //node.material.opacity=value;\n        });\n\n        this.colorProp = nodesFolder.add(appState, \"defaultProps\", appState.defaultProps)\n            .name(\"Color by Attr.\")\n            .onChange(function(value) {\n            nodes0.colorByProp(value)\n        });\n        this.colorField = nodesFolder.add(appState, \"defaultProps\", appState.defaultProps)\n            .name(\"Color Field\")\n            .onChange(function(value) {\n            nodes0.colorByField(value)\n        });\n\n\n\n        nodesFolder.open()\n        this.nodesFolder = nodesFolder\n\n        /* Edges */\n        let edgesFolder = gui.addFolder('Edges');\n        edgesFolder.add( Config.edges, 'show' ).onChange( function ( value ) {\n\n            Config.edges.show = value\n            render();\n        } );\n        //edgesFolder.addColor(Config.edges, \"color\").name('Color')\n            //.onChange((color) => {\n                //edges0.changeColor(color)\n        //});\n\n\n        let colorEdge = {prop:[], field:[]}\n        this.colorEdgeProp = edgesFolder.add(colorEdge, \"prop\", colorEdge.prop)\n            .name(\"Color by Prop.\")\n            .onChange(function(value) {\n            edges0.colorByProp(value)\n        });\n        this.colorEdgeField = edgesFolder.add(colorEdge, \"field\", colorEdge.prop)\n            .name(\"Color by Field.\")\n            .onChange(function(value) {\n            edges0.colorByField(value)\n        });\n\n        //nodesFolder.add(Config.nodes, 'scale', 0.01, 5).name('Scale').onChange((value) => {\n            //nodes0.changeScale(value)\n            ////node.material.opacity=value;\n        //});\n        edgesFolder.add(Config.edges, 'opacity', 0, 1).name('Opacity').onChange((value) => {\n            edges0.changeOpacity(value)\n            //node.material.opacity=value;\n        });\n\n        //Edges Bloom\n\n        //edgesFolder.addColor(Config.layers[edgesBloomScene], 'clearColor' ).onChange( function ( color ) {\n\n        //bloomPassEdges.clearColor.set(color)\n        //render()\n        //});\n\n        //edgesFolder.add( Config.layers[edgesBloomScene], 'enabled' ).onChange( function ( value ) {\n\n        //bloomPassEdges.enabled = value\n        //render();\n        //} );\n        //edgesFolder.add( Config.layers[edgesBloomScene], 'strength', 0.0, 2 ).onChange( function ( value ) {\n        ////bloomPassEdges.copyUniforms.opacity(value)\n        //bloomPassEdges.strength = value\n        //render();\n        //} );\n\n\n        //edgesFolder.add( Config.layers[edgesBloomScene], 'exposure', 0.01, 2 ).onChange( function ( value ) {\n        //renderer.toneMappingExposure = Math.pow( value, 1.0 );\n        //render();\n        //} );\n\n        //edgesFolder.add( Config.layers[edgesBloomScene], 'bloomThreshold', 0.0, 10 ).step(0.01).onChange( function ( value ) {\n        //bloomPassEdges.threshold = Number( value )/100;\n        //render();\n        //} );\n\n        //edgesFolder.add( Config.layers[edgesBloomScene], 'bloomStrength', 0.0, 2.0 ).onChange( function ( value ) {\n        //bloomPassEdges.strength = Number( value );\n        //render();\n        //} );\n\n        //edgesFolder.add( Config.layers[edgesBloomScene], 'bloomRadius', 0.0, 1.0 ).step( 0.01 ).onChange( function ( value ) {\n        //bloomPassEdges.radius = Number( value );\n        //render();\n        //} );\n        edgesFolder.open()\n\n        /* Controls */\n        //const controlsFolder = gui.addFolder('Controls');\n        //controlsFolder.add(Config.controls, 'autoRotate').name('Auto Rotate').onChange((value) => {\n        //this.controls.autoRotate = value;\n        //});\n        //const controlsAutoRotateSpeedGui = controlsFolder.add(Config.controls, 'autoRotateSpeed', -1, 1).name('Rotation Speed');\n        //controlsAutoRotateSpeedGui.onChange((value) => {\n        //this.controls.enableRotate = false;\n        //this.controls.autoRotateSpeed = value;\n        //});\n        //controlsAutoRotateSpeedGui.onFinishChange(() => {\n        //this.controls.enableRotate = true;\n        //});\n\n        renderer.updateSize();\n        /* Mesh */\n\n    }\n    updateComunityField(values){\n        values.unshift('');\n        updateDropdown(this.comunityField , values);\n    }\n    updateNodeColorProp(values){\n        values.unshift('');\n        values = values.filter(v=> v != 'pos')\n        updateDropdown(this.colorField , values);\n        updateDropdown(this.colorProp , values);\n        updateDropdown(this.sizeField , values.filter(v=> v!='color'));\n    }\n    updateEdgeColorProp(values){\n        values.unshift('');\n        updateDropdown(this.colorEdgeField , values);\n        updateDropdown(this.colorEdgeProp , values);\n    }\n\n\n\n}\n\n//unreal bloom effect\n//enabled: true\n//needsSwap: false\n//clear: false\n//renderToScreen: true\n//strength: 5\n//radius: 0\n//threshold: 0\n//resolution: Vector2 {x: 1366, y: 348}\n//clearColor: Color\n//r: 255\n//g: 255\n//b: 255\n//__proto__: Object\n//renderTargetsHorizontal: (5) [WebGLRenderTarget, WebGLRenderTarget, WebGLRenderTarget, WebGLRenderTarget, WebGLRenderTarget]\n//renderTargetsVertical: (5) [WebGLRenderTarget, WebGLRenderTarget, WebGLRenderTarget, WebGLRenderTarget, WebGLRenderTarget]\n//nMips: 5\n//renderTargetBright: WebGLRenderTarget {width: 683, height: 174, scissor: Vector4, scissorTest: false, viewport: Vector4, …}\n//highPassUniforms: {tDiffuse: {…}, luminosityThreshold: {…}, smoothWidth: {…}, defaultColor: {…}, defaultOpacity: {…}}\n//materialHighPassFilter: ShaderMaterial {uuid: \"031D54E9-22F3-4F42-8C31-EF4D970724C3\", name: \"\", type: \"ShaderMaterial\", fog: false, blending: 1, …}\n//separableBlurMaterials: (5) [ShaderMaterial, ShaderMaterial, ShaderMaterial, ShaderMaterial, ShaderMaterial]\n//compositeMaterial: ShaderMaterial {uuid: \"DBA670AF-AC33-428C-BAB3-91BE67FE2901\", name: \"\", type: \"ShaderMaterial\", fog: false, blending: 1, …}\n//bloomTintColors: (5) [Vector3, Vector3, Vector3, Vector3, Vector3]\n//copyUniforms: {tDiffuse: {…}, opacity: {…}}\n//materialCopy: ShaderMaterial {uuid: \"369D3C24-A73E-4576-BB78-E1261A5E6D64\", name: \"\", type: \"ShaderMaterial\", fog: false, blending: 2, …}\n//oldClearColor: Color {}\n//oldClearAlpha: 1\n","import Keyboard from \"../../utils/keyboard\";\nimport Helpers from \"../../utils/helpers\";\n//import Config from \"../../data/config\";\nimport alertify  from \"alertifyjs\"\n// Manages all input interactions\nexport default class Interaction {\n    constructor(canvas, appState, Config, datGui, keypressFunc) {\n        // Properties\n        this.canvas = canvas;\n        this.keypressFunc = keypressFunc\n        this.datGui = datGui\n        this.timeout = null;\n\n        // Instantiate keyboard helper\n        this.keyboard = new Keyboard();\n\n        //this.keyboard = new Keyboard(document.getElementById('containergraphCanvas'));\n\n        // Listeners\n        // Mouse events\n\n\n        this.keypressEvent = this.keypressEvent.bind(this)\n        // Keyboard events\n        this.keyboard.domElement.addEventListener(\"keydown\", (event) => this.keypressEvent(event)\n            // Only once\n\n            //if(this.keyboard.eventMatches(event, 'escape')) {\n            //  console.log('Escape pressed');\n            // }\n        );\n        this.appState = appState\n    }\n    keypressEvent(event){\n        let repeat = event.repeat\n        let key = event.key\n        let alertHTMLobj = document.getElementById(\"bootstraAlertStrong\")\n        //let bootstrapAlert = document.getElementById(\"bootstrapAlert\")\n        let bootstrapAlert = $(\"#bootstrapAlert\")\n        switch (key.toLowerCase()) {\n            case \"e\":\n                alertify.message(\"Edition Mode\")\n                this.datGui.closed = true\n                this.appState.vimMode = \"Edition\";\n                console.info(\"Vim mode Edition\");\n                break;\n\n            case \"v\":\n                alertify.message(\"Visual Mode\")\n                this.datGui.closed = false\n                this.appState.vimMode = \"Visual\";\n                console.info(\"Vim mode Visualization\");\n                break;\n            case \"n\":\n                alertify.message(\"Navigation Mode\")\n                this.datGui.closed = true\n                this.appState.vimMode = \"Navigation\";\n                break;\n\n            case \"s\":\n                document.getElementById(\"widthSaveImage\").value = window.innerWidth\n                document.getElementById(\"heightSaveImage\").value = window.innerHeight\n                $('#saveImageModal').modal(\"show\")\n\n            case \"d\":\n                if (this.appState.vimMode == \"Edition\")\n                    this.keypressFunc(key, \"deleteNode\")\n                break;\n\n\n            case \"l\":\n            case \"j\":\n            case \"i\":\n            case \"k\":\n\n                if ((this.appState.vimMode == \"Visual\") &&(key==\"l\")){\n                    alertify.confirm(\"Are you sure you want to reload the graph?\",\n                        ()=>{\n                            this.keypressFunc(key, \"reloadGraph\")\n                        });\n                }\n\n                if (this.appState.vimMode == \"Edition\"){\n                    this.keypressFunc(key, \"move\")\n                    repeat = false\n                }\n                break;\n\n            case \"r\":\n                if (this.appState.vimMode == \"Visual\")\n                    alertify.message(\"Recalculating  positions\")\n                    this.keypressFunc (key,\"recalcPos\")\n                break;\n\n\n\n            default:\n                break;\n        }\n        if (repeat) {\n            return;\n        }\n\n        //console.log(\"keydown\", event);\n    }\n}\n","// Global imports -\nimport * as THREE from \"three\";\n//import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { TrackballControls } from 'three/examples/jsm/controls/TrackballControls';\n\nimport alertify  from \"alertifyjs\"\n\n// Components\nimport Renderer from \"./components/renderer/main\";\n//import PickCamera from \"./components/pick\";\nimport Nodes from \"./components/nodes/main\";\nimport Edges from \"./components/edges/main\";\n\n\n// User Interaction\nimport Keyboard from \"./interactions/keyboard\";\nimport DatGUI from './interactions/datGUI';\n\nexport default class Graph {\n    constructor(\n        idCanvasHTML,\n        Config,\n        keyboardPressFunction,\n        use2d=false,\n    ) {\n\n\n        this.Config = Config\n        this.use2d = use2d;\n        this.idCanvasHTML = idCanvasHTML\n        this.canvas = document.getElementById(`${idCanvasHTML}`);\n        this.container = document.getElementById(`container${idCanvasHTML}`);\n        if(use2d){\n            this.camera = new THREE.OrthographicCamera(\n                2, -2, 2, -2, Config.camera.near, Config.camera.far);\n\n        }else{\n            this.camera = new THREE.PerspectiveCamera(\n                Config.camera.fov, Config.camera.aspect, Config.camera.near, Config.camera.far);\n        }\n\n        this.scene = new THREE.Scene();\n\n        this.renderer;\n        this.state;\n        this.keyboardPressFunction = keyboardPressFunction\n\n        //this.init = this.init.bind(this)\n    }\n    init(){\n        this.state = {\n            vimMode: \"Visual\",\n            isLoaded: false,\n            firstLoad: true,\n            takingScreenshot: false,\n            defaultProps: {},\n            stopChanges: false,\n            renders: [],\n            comunityField:{},\n            rendering: false,\n            defaultProps: {}\n        }\n\n        let viewSize = 1;\n        var aspectRatio = window.innerWidth / window.innerHeight;\n        this.state.originalAspect = window.innerWidth / window.innerHeight;\n\n        this.scene.add(this.camera);\n\n        this.scene.background = new THREE.Color(this.Config.scene.color);\n\n        this.nodes = new Nodes(this.scene, this.use2d);\n        this.edges = new Edges(this.scene, 0, 1);\n\n\n        this.controls = new OrbitControls(this.camera, this.canvas);\n\n        this.controls.target.set(0, 0, 0);\n        this.controls.enableKeys=true;\n        this.controls.screenSpacePanning = true;\n        //this.controls.update();\n\n        if(this.use2d){\n\n            this.controls.enableRotate=false;\n            //this.controls.maxPolarAngle = 0; // radians\n            //this.controls.minAzimuthAngle = - 0; // radians\n            //this.controls.maxAzimuthAngle = 0; // radians\n\n        }\n        this.renderer = new Renderer(this.scene, this.controls, this.container, this.canvas, this.camera, this.state);\n\n        if (this.Config.useGuiControl)\n            this.datGui = new DatGUI(\n                this.idCanvasHTML,\n                this.scene,\n                this.renderer,\n                this.camera,\n                this.nodes,\n                this.edges,\n                this.Config,\n                //bloomPassEdges,edgesBloomScene,\n                this.state);\n        if (this.Config.useKeyboard)\n            this.keyboardInteraction = new Keyboard(\n                this.canvas,\n                this.state,\n                this.Config,\n                this.datGui.gui,\n                this.keyboardPressFunction,\n            );\n\n        //{\n            //const color = 0xffffff;\n            //const intensity = 4;\n            //const light = new THREE.DirectionalLight(color, intensity);\n            //light.position.set(-1, 2, 4);\n            //light.layers.enable(0)\n            //this.camera.add(light);\n        //}\n    }\n    ressetLook(){\n        let position = this.edges.instancedEdges.geometry.boundingSphere.center\n        this.camera.position.z = 4*this.edges.instancedEdges.geometry.boundingSphere.radius\n        this.camera.lookAt(position)\n        this.camera.updateProjectionMatrix();\n        this.renderer.render()\n    }\n    deleteGraph(){\n        this.nodes.deleteAllNodes()\n        this.edges.deleteAllEdges()\n    }\n    getURI(width, height, transparency){\n        transparency = transparency || false;\n        const uri = this.renderer.getURI(width, height, transparency);\n        this.uri = uri\n    }\n    stopRender(){\n        //this.deleteGraph();\n        this.renderer.stop();\n\n    }\n}\n\n\n","// Provides simple static functions that are used multiple times in the app\nexport default class Helpers {\n  static throttle(fn, threshhold, scope) {\n    threshhold || (threshhold = 250);\n    let last, deferTimer;\n\n    return function() {\n      const context = scope || this;\n\n      const now  = +new Date,\n          args = arguments;\n\n      if(last && now < last + threshhold) {\n        clearTimeout(deferTimer);\n        deferTimer = setTimeout(function() {\n          last = now;\n          fn.apply(context, args);\n        }, threshhold);\n      }\n      else {\n        last = now;\n        fn.apply(context, args);\n      }\n    };\n  }\n\n  static logProgress() {\n    return function(xhr) {\n      if(xhr.lengthComputable) {\n        const percentComplete = xhr.loaded / xhr.total * 100;\n\n        console.log(Math.round(percentComplete, 2) + '% downloaded');\n      }\n    }\n  }\n\n  static logError() {\n    return function(xhr) {\n      console.error(xhr);\n    }\n  }\n\n  static handleColorChange(color) {\n    return (value) => {\n      if(typeof value === 'string') {\n        value = value.replace('#', '0x');\n      }\n\n      color.setHex(value);\n    };\n  }\n\n  static update(mesh) {\n    this.needsUpdate(mesh.material, mesh.geometry);\n  }\n\n  static needsUpdate(material, geometry) {\n    return function() {\n      material.shading = +material.shading; //Ensure number\n      material.vertexColors = +material.vertexColors; //Ensure number\n      material.side = +material.side; //Ensure number\n      material.needsUpdate = true;\n      geometry.verticesNeedUpdate = true;\n      geometry.normalsNeedUpdate = true;\n      geometry.colorsNeedUpdate = true;\n    };\n  }\n\n  static updateTexture(material, materialKey, textures) {\n    return function(key) {\n      material[materialKey] = textures[key];\n      material.needsUpdate = true;\n    };\n  }\n}\n","const ALIAS = {\n  'left'\t\t: 37,\n  'up'\t\t  : 38,\n  'right'\t\t: 39,\n  'down'\t\t: 40,\n  'space'\t\t: 32,\n  'tab'\t\t  : 9,\n  'escape'\t: 27\n};\n\nexport default class Keyboard {\n  constructor(domElement) {\n    this.domElement = domElement || document;\n    this.keyCodes = {};\n\n    // bind keyEvents\n    this.domElement.addEventListener('keydown', (event) => this.onKeyChange(event), false);\n    this.domElement.addEventListener('keyup', (event) => this.onKeyChange(event), false);\n\n    // bind window blur\n    window.addEventListener('blur', () => this.onBlur, false);\n  }\n\n  destroy() {\n    this.domElement.removeEventListener('keydown', (event) => this.onKeyChange(event), false);\n    this.domElement.removeEventListener('keyup', (event) => this.onKeyChange(event), false);\n\n    // unbind window blur event\n    window.removeEventListener('blur', () => this.onBlur, false);\n  }\n\n  onBlur() {\n    for(const prop in this.keyCodes)\n      this.keyCodes[prop] = false;\n  }\n\n  onKeyChange(event) {\n    // log to debug\n    //console.log('onKeyChange', event, event.keyCode, event.shiftKey, event.ctrlKey, event.altKey, event.metaKey)\n\n    // update this.keyCodes\n    const keyCode = event.keyCode;\n    this.keyCodes[keyCode] = event.type === 'keydown';\n  }\n\n  pressed(keyDesc) {\n    const keys = keyDesc.split('+');\n    for(let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      let pressed = false;\n      if(Object.keys(ALIAS).indexOf(key) != -1) {\n        pressed = this.keyCodes[ALIAS[key]];\n      } else {\n        pressed = this.keyCodes[key.toUpperCase().charCodeAt(0)];\n      }\n      if(!pressed)\n        return false;\n    }\n\n    return true;\n  }\n\n  eventMatches(event, keyDesc) {\n    const aliases = ALIAS;\n    const aliasKeys = Object.keys(aliases);\n    const keys = keyDesc.split('+');\n    // log to debug\n    // console.log('eventMatches', event, event.keyCode, event.shiftKey, event.ctrlKey, event.altKey, event.metaKey)\n    for(let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      let pressed = false;\n      if(key === 'shift') {\n        pressed = event.shiftKey ? true : false;\n      } else if(key === 'ctrl') {\n        pressed = event.ctrlKey ? true : false;\n      } else if(key === 'alt') {\n        pressed = event.altKey ? true : false;\n      } else if(key === 'meta') {\n        pressed = event.metaKey ? true : false;\n      } else if(aliasKeys.indexOf(key) !== -1) {\n        pressed = event.keyCode === aliases[key];\n      } else if(event.keyCode === key.toUpperCase().charCodeAt(0)) {\n        pressed = true;\n      }\n      if(!pressed)\n        return false;\n    }\n\n    return true;\n  }\n}\n"],"sourceRoot":""}