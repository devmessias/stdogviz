{"version":3,"sources":["webpack:///./src/js/app.js","webpack:///./src/js/connections/dataPool.js","webpack:///./src/js/data/config.js","webpack:///./src/js/graph/components/edges/main.js","webpack:///./src/js/graph/components/nodes/main.js","webpack:///./src/js/graph/components/nodes/shaders/marker.fsh.js","webpack:///./src/js/graph/components/nodes/shaders/marker.vsh.js","webpack:///./src/js/graph/components/nodes/shaders/markerImg.fsh.js","webpack:///./src/js/graph/components/nodes/shaders/markerImg.vsh.js","webpack:///./src/js/graph/components/renderer/main.js","webpack:///./src/js/graph/helpers/stats.js","webpack:///./src/js/graph/helpers/tools.js","webpack:///./src/js/graph/interactions/datGUI.js","webpack:///./src/js/graph/interactions/keyboard.js","webpack:///./src/js/graph/main.js","webpack:///./src/js/utils/helpers.js","webpack:///./src/js/utils/keyboard.js"],"names":["__ENV__","console","info","Config","isDev","keyboardPressFunction","key","action","dataPoolSocket","recalcPos","reloadGraph","listenerFunction","event","message","JSON","parse","data","clearInterval","intervalGetGraph","group","time","graphObj","edges","createEdges","nodes","defaultProps","groupEnd","timeEnd","createNodes","state","firstLoad","ressetLook","stopUpdate","datGui","updateNodeColorProp","props","updateComunityField","Object","keys","nodesGroup","updateNodePositions","pos","renderer","render","queryString","window","location","search","urlParams","URLSearchParams","useHighQuality","has","get","useBloom","useGuiControl","Graph","graphObjVar","init","address","DataPool","setInterval","getGraph","ws","WebSocket","onopen","alertify","success","bind","onclose","warning","onerror","error","addEventListener","open","readyState","OPEN","isOpen","type","send","stringify","nodesId","scene","color","antialias","isShowingStats","useStats","useKeyboard","isLoaded","isMouseMoving","isMouseOver","maxAnisotropy","bloomPass","exposure","strength","threshold","radius","dpr","layers","enabled","clearColor","bloomStrength","bloomThreshold","bloomRadius","material","scale","show","edgeColor","edgeWidth","roughness","opacity","fog","near","camera","fov","far","aspect","posX","posY","posZ","controls","autoRotate","autoRotateSpeed","rotateSpeed","zoomSpeed","minDistance","maxDistance","minPolarAngle","maxPolarAngle","Math","PI","minAzimuthAngle","Infinity","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","target","x","y","z","Edges","layer","bloomLayer","numEdges","edgesData","instancedEdges","positions","positionVertices","f","arr","index","push","map","i","s","t","id_s","id_t","geometry","attributes","position","array","Float32Array","needsUpdate","computeBoundingSphere","prop","colors","colormap","nshades","format","alpha","values","bufferColors","sort","val1","val2","r","g","b","flat","length","alert","value","nodesData","createVertices","updateGeometry","dispose","THREE","setFromPoints","vertices","segments","nodeInId","id","nodeOutId","random","remove","deleteAllEdges","vertexColors","transparent","linewidth","setAttribute","add","Nodes","use2d","selectedGroupName","groupName","includes","allGroups","entries","getGroup","nodesGroupName","nodesObj","numNodes","updateColors","fixedColor","mesh","vertexShader","getMarkerVertexShader","fixedNodeSize","addAttribute","uniforms","String","deleteAttribute","marker","fragmentShader","getMarkerFragmentShader","updateMarker","colorHEX","updateColor","bufferNodeSize","updateSizes","sizes","sMin","min","sMax","max","sizesBuffer","bufferNodeSizes","size","instancedNodes","bufferRadius","bufferOpacity","bufferNodeScale","bufferNodePositions","clear","name","randomString","what","nodesMesh","instancedGeometry","randomChoice","availableMarkers","markerGeometry","copy","maxInstancedCount","depthTest","depthWrite","distFunctions","getDistFunction","exist","getShading","shadingStr","markerVertexShader","markerImgFragmentShader","getMarkerImgVertexShader","dataURIToBlob","dataURI","binStr","atob","split","len","Uint8Array","charCodeAt","Blob","saveDataURI","blob","link","document","createElement","download","href","URL","createObjectURL","onclick","setTimeout","revokeObjectURL","removeAttribute","click","defaultFileName","ext","str","Date","toLocaleDateString","toLocaleTimeString","replace","Renderer","container","canvas","appState","preserveDrawingBuffer","autoClear","stats","Stats","setUp","toneMapping","setPixelRatio","devicePixelRatio","getMaxAnisotropy","initComposer","initBloomComposer","updateSize","offsetWidth","offsetHeight","takeScreenshot","btnSave","getElementById","composer","EffectComposer","renderPass","RenderPass","addPass","BloomPass","UnrealBloomPass","innerWidth","innerHeight","widthRender","heightRender","keepPos","change","originalAspect","newSize","left","right","top","bottom","updateProjectionMatrix","clientWidth","clientHeight","setCameraAspect","setSize","pixelRatio","getPixelRatio","start","end","removeEventListener","widthImage","heightImage","saveWithTransparency","background","setClearColor","toDataURL","takingScreenshot","$","modal","stopChanges","parseInt","checked","DataURI","getURI","rS","bS","glS","tS","BrowserStats","glStats","threeStats","rStats","CSSPath","userTimingAPI","frame","caption","over","average","avgMs","fps","below","calls","raf","rstats","texture","groups","fractions","base","steps","plugins","tick","update","toString","substring","floor","updateDropdown","list","innerHTMLStr","domElement","children","innerHTML","DatGUI","idCanvasHTML","nodes0","edges0","gui","dat","autoPlace","appendChild","sceneFolder","addFolder","addColor","onChange","nodesFolder","comunityField","setComunity","markers","changeMarker","nodeName","node","visible","changeColor","sizeField","sizeByField","changeScale","changeEdgeColor","changeEdgeWidth","changeOpacity","colorProp","colorByProp","colorField","colorByField","edgesFolder","colorEdge","field","colorEdgeProp","colorEdgeField","renderFolder","toneMappingExposure","pow","Number","step","unshift","filter","v","Interaction","keypressFunc","timeout","keyboard","Keyboard","keypressEvent","repeat","alertHTMLobj","bootstrapAlert","toLowerCase","closed","vimMode","confirm","renders","rendering","viewSize","aspectRatio","OrbitControls","set","enableKeys","screenSpacePanning","enableRotate","highQuality","keyboardInteraction","deleteAllNodes","width","height","transparency","uri","stop","Helpers","fn","threshhold","scope","last","deferTimer","context","now","args","arguments","clearTimeout","apply","xhr","lengthComputable","percentComplete","loaded","total","log","round","setHex","shading","side","verticesNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","materialKey","textures","ALIAS","keyCodes","onKeyChange","onBlur","keyCode","keyDesc","pressed","indexOf","toUpperCase","aliases","aliasKeys","shiftKey","ctrlKey","altKey","metaKey"],"mappings":"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","file":"main.app.js","sourcesContent":["\nimport Graph from './graph/main';\nimport Config from './data/config';\nimport DataPool from \"./connections/dataPool\";\n\n\nif(__ENV__ === 'dev') {\n  console.info('----- RUNNING IN DEV ENVIRONMENT! -----');\n  Config.isDev = true;\n}\n\n\nfunction keyboardPressFunction(key, action) {\n        switch (action) {\n\n            case \"deleteNode\":\n                //let pickedObjectsNames = cameraObj.pickedObjects;\n                //if (pickedObjectsNames.length>0) {\n\n                //cameraObj.deleteHelpers();\n                //Config.vimMode = \"Visual\"\n                //dataPoolSocket.deleteNodes(pickedObjectsNames);\n                //pickedObjectsNames.map(nodeId=>nodes0.deleteNode(nodeId));\n                ////pickedObjectsNames.map(=>edges0.deleteByNode(nodeId));\n                //cameraObj.unpick();\n                //}\n\n                //render()\n                break;\n            case \"move\":\n                //let p = 0.1\n                //let dr = {\n                //\"l\" :[p, 0, 0],\n                //\"j\" :[-p, 0 ,0],\n                //\"i\": [0, p, 0],\n                //\"k\": [0, -p, 0]\n                //}[key.toLowerCase()]\n                //let pWorld =  new THREE.Vector3( dr[0], dr[1], -1 ).unproject( camera );\n                //nodes0.moveNodes({}, cameraObj.pickedObjects, dr)\n\n                //render()\n                break;\n            case \"recalcPos\":\n                dataPoolSocket.recalcPos()\n\n                break;\n\n            case \"reloadGraph\":\n                dataPoolSocket.reloadGraph()\n                break;\n\n            default:\n                break;\n        }\n    }\nfunction listenerFunction(event) {\n    let message = JSON.parse(event.data);\n    switch (message[\"type\"]) {\n        case \"getGraph\":\n            clearInterval(intervalGetGraph);\n            //graphObj.state.defaultProps = message.defaultProps\n            //\n            console.group('getGraph');\n            console.time('creatingEdges');\n\n            console.group('createEdges');\n            graphObj.edges.createEdges(message.nodes, message.edges, message.defaultProps);\n            console.groupEnd()\n            console.timeEnd('creatingEdges');\n\n            console.group('createNodes');\n            console.time('creatingNodes');\n            graphObj.nodes.createNodes(message.nodes, true);\n            console.timeEnd('creatingNodes');\n            console.groupEnd()\n            if(graphObj.state.firstLoad){\n                graphObj.firstLoad = false;\n               graphObj.ressetLook();\n                clearInterval(intervalGetGraph)\n            }\n\n            graphObj.nodes.stopUpdate();\n           //let nodes = JSON.parse(JSON.stringify(message.nodes))\n            //nodes.pos = nodes.pos.map((p)=>p*0.3);\n            //graphObj.nodes.createNodes(nodes, false);\n            //\n            //camera.position.set(0, nodes0.max_vals[2] * (1 + 2), 0);\n            graphObj.datGui.updateNodeColorProp(message.nodes.props)\n            graphObj.datGui.updateComunityField(Object.keys(graphObj.nodes.nodesGroup));\n            //datGui.updateEdgeColorProp(message.edges.props)\n            //camera.lookAt(nodes0.instancedNodes);\n            console.groupEnd();\n\n            break;\n\n        case \"addNodes\":\n            graphObj.nodes.createNodes(message.nodes, false);\n            if(graphObj.state.firstLoad){\n                graphObj.firstLoad = false;\n                graphObj.ressetLook();\n                clearInterval(intervalGetGraph)\n            }\n\n\n            break;\n        case \"deleteNodes\":\n            //message.info.nodesId.map(nodeId=>nodes0.deleteNode(nodeId));\n            //message.info.edgesName.map(edgeName=>edges0.deleteEdge(edgeName));\n            ////dataPoolSocket.recalcPos();\n            ////\n            //render()\n            break;\n\n        case \"updatePos\":\n            graphObj.nodes.updateNodePositions(message.info.pos);\n            graphObj.edges.updateNodePositions(message.info.pos);\n            graphObj.renderer.render()\n            break;\n\n\n        default:\n            break;\n    }\n\n\n}\nconst queryString = window.location.search;\nconst urlParams = new URLSearchParams(queryString);\n\nconsole.info(queryString);\nconst useHighQuality = urlParams.has('highQuality')? urlParams.get('highQuality')=='1': true;\nconst useBloom = urlParams.has('bloom')? urlParams.get('bloom')=='1': true;\n\n\nConfig.useGuiControl = true;\n\nconst graphObj = new Graph(\n    \"graphCanvas\",\n    Config,\n    keyboardPressFunction,\n    false,\n    useHighQuality,\n    useBloom,\n)\nwindow.graphObjVar = graphObj;\ngraphObj.init()\n\nconsole.group('Socket Conection');\n\nconst address = urlParams.has('address')? urlParams.has('address'): 'localhost:6688';\nconsole.info('Address:', address);\n\nlet dataPoolSocket = new DataPool(address, listenerFunction);\n\nconst intervalGetGraph = setInterval(() => {\n    dataPoolSocket.getGraph();\n}, 1000);\n\nconsole.groupEnd();\n","import alertify from \"alertifyjs\"\n\nimport Config from '../data/config';\n\n\nexport default class DataPool {\n    constructor(address, listenerFunction) {\n        this.address = address;\n        this.ws = new WebSocket(`ws://${address}/`);\n\n        this.ws.onopen = function (event) {\n            alertify.success(\"opened connection\");\n        }.bind(this,);\n        this.ws.onclose = () => alertify.warning(\"closed connection\");\n        this.ws.onerror = () => alertify.error(\"error connection\");\n        this.ws.addEventListener(\"message\", listenerFunction);\n        this.getGraph = this.getGraph.bind(this)\n    }\n\n    isOpen() {\n        const open = this.ws.readyState === this.ws.OPEN\n        if (!open){\n            alertify.error(\"Connection Closed\")\n            console.error(\"Conection closed\")\n            this.ws = new WebSocket(`ws://${Config.address}/`);\n        }\n        return open\n    }\n\n    getGraph() {\n        if (!this.isOpen()) return\n        const message = {\n            type: \"getGraph\",\n        };\n        this.ws.send(JSON.stringify(message));\n    }\n\n    deleteNodes(nodesId) {\n        console.info(\"deleteNodes\", nodesId)\n        if (!this.isOpen()) return\n        const message = {\n            type: \"deleteNodes\",\n            info: {\"nodesId\": nodesId}\n        };\n        this.ws.send(JSON.stringify(message));\n    }\n\n    reloadGraph(){\n        console.info(\"reload Graph\")\n        if (!this.isOpen()) return\n        const message = {\n            type: \"reloadGraph\",\n        };\n        this.ws.send(JSON.stringify(message));\n        //window.location.reload()\n    }\n\n\n    recalcPos() {\n        console.info(\"recalc pos\")\n        if (!this.isOpen()) return\n        const message = {\n            type: \"recalcPos\",\n        };\n        this.ws.send(JSON.stringify(message));\n    }\n}\n","\nexport default {\n    address: \"127.0.0.1:6688\" ,\n    scene: {\n        color: 0x000,\n        //color: 0xffffff\n    },\n    isDev: true,\n    render:{\n        antialias: true,\n    },\n    isShowingStats: true,\n    useStats: true,\n    useGuiControl: false,\n    useKeyboard: true,\n    isLoaded: false,\n    isMouseMoving: false,\n    isMouseOver: false,\n    maxAnisotropy: 2,\n    bloomPass: {\n        exposure: 1,\n        strength: 0.5,\n        threshold: 0,\n        radius: 0,\n\n    },\n    dpr: 1,\n    layers:{\n        0:{},\n        1:{\n            enabled:true,\n\n            clearColor: 0x000000,\n            exposure: 1,\n            strength: 0.5,\n            bloomStrength: 5,\n            bloomThreshold: 0,\n            bloomRadius: 0,\n        } ,\n        2:{},\n        3:{\n\n            enabled:false,\n            exposure: 1,\n\n            clearColor: 0x000000,\n            strength: 0.5,\n            bloomStrength: 5,\n            bloomThreshold: 0,\n            bloomRadius: 0,\n\t\t\t\tscene: \"Scene with Glow\"\n        } ,\n    },\n    nodes: {\n        material: \"fast\",\n        scale:1,\n        show: true,\n        radius: .5,\n        color: 0x0000ff,\n        edgeColor: 0x0000ff,\n        edgeWidth: 0.1,\n        roughness: 0.5,\n        opacity: 1,\n\n    },\n    edges: {\n        show: true,\n        color: 0xff,\n        //color: 0x0000ff,\n        roughness: 0.5,\n        opacity: 1,\n\n    },\n\n    fog: {\n        color: 0xffffff,\n        near: 0.0008\n    },\n    camera: {\n        fov: 40,\n        near: 2,\n        far: 1000,\n        aspect: 1,\n        posX: 0,\n        posY: 30,\n        posZ: 40\n    },\n    controls: {\n        autoRotate: false,\n        autoRotateSpeed: -0.5,\n        rotateSpeed: 0.5,\n        zoomSpeed: 0.8,\n        minDistance: 0,\n        maxDistance: 600,\n        minPolarAngle:0,\n        maxPolarAngle: Math.PI ,\n        minAzimuthAngle: -Infinity,\n        maxAzimuthAngle: Infinity,\n        enableDamping: true,\n        dampingFactor: 0.5,\n        enableZoom: true,\n        target: {\n            x: 0,\n            y: 0,\n            z: 0\n        }\n    },\n};\n","import * as THREE from \"three\";\nimport colormap from \"colormap\"\nimport alertify  from \"alertifyjs\"\n\n\nexport default class Edges {\n    constructor(scene, layer, bloomLayer) {\n        this.createEdges = this.createEdges.bind(this);\n\n        this.scene = scene;\n        this.layer = layer\n        this.bloomLayer = bloomLayer\n\n        this.numEdges = 0\n        this.edgesData = {}\n        this.instancedEdges\n\n\n    }\n\n    //deleteByNode(nodeId){\n    //}\n    updateNodePositions(positions){\n        let positionVertices = []\n        //A simple arrow function  in order to clean the code\n        const f = (arr, index) => arr.push(...[0, 1, 2].map((i)=>positions[index+i]))\n        for (let [s, t] of this.edgesData.nodes) {\n            let id_s = s*3\n            let id_t = t*3\n            //positionVertices.push(\n                //positions[id_s],\n            //)\n            f(positionVertices, id_s)\n            f(positionVertices, id_t)\n        }\n        this.instancedEdges.geometry.attributes.position.array = new Float32Array(positionVertices);\n        this.instancedEdges.geometry.attributes.position.needsUpdate = true\n        this.instancedEdges.geometry.computeBoundingSphere();\n    }\n\n    colorByProp(prop){\n        let colors = colormap({\n            colormap: \"jet\",\n            nshades: this.numEdges,\n            format: \"float\",\n            alpha: 1\n        })\n        let values = this.edgesData[prop]\n\n        const bufferColors = colors\n            .map((color, index) => [values[index], color]) // add the prop to sort by\n            .sort(([val1], [val2]) => val2 - val1) // sort by the prop data\n            .map(([, color]) => color)\n            .map(([r, g, b, alpha])=>[r, g, b, r, g, b])\n            .flat()\n\n        if (bufferColors.length != this.numEdges*6){\n            alertify.error(\"Invalid prop\")\n            alert(\"prop fail\")\n            return\n        }\n\n        this.instancedEdges.geometry.attributes.color.array = new Float32Array(bufferColors);\n        this.instancedEdges.geometry.attributes.color.needsUpdate = true\n        this.instancedEdges.material.needsUpdate = true;\n\n    }\n    changeOpacity(value){\n        this.instancedEdges.material.opacity=value;\n        //this.instancedEdges.material.blending=THREE.AdditiveBlending,c\n        this.instancedEdges.material.needsUpdate = true;\n    }\n    ressetVerticesPos(nodesData, edgesData) {\n        this.createVertices(nodesData, edgesData)\n        this.updateGeometry()\n    }\n    updateGeometry(){\n        this.edges.geometry.dispose();\n        this.edges.geometry = new THREE.BufferGeometry().setFromPoints(\n            Object.values(this.vertices)\n        );\n    }\n    //deleteEdge(edgeName){\n        //if (!(edgeName in this.segments)) return\n        //let inName = this.segments[edgeName][1]\n        //let outName = this.segments[edgeName][0]\n        //delete this.segments[edgeName]\n        //delete this.vertices[inName]\n        //delete this.vertices[outName]\n        //this.updateGeometry()\n    //}\n    createVertices(nodesData, edgesData, defaultProps){\n        this.vertices = {}\n        this.segments = {}\n        var positions = [];\n        var colors = [];\n        let r = 800\n        let color;\n\n        const f = (arr, index) => arr.push(...[0, 1, 2].map((i)=>{\n            let pos = nodesData.pos[index*3+i]\n            if(i==2)\n                pos = pos-0.01\n            return pos\n        }))\n        for (let [s, t] of edgesData.nodes) {\n\n            //let geometry = new THREE.Geometry();\n            //  let i = 0;\n            //if (i<1) return\n            //\n            const nodeInId = nodesData.id[s]\n            const nodeOutId = nodesData.id[t]\n            if ((Math.random())>-1){\n            //let edgeName = `${nodeInId}-to-${nodeOutId}`\n            //\n            f(positions, t)\n            f(positions, s)\n            //let [x, y, z] = nodesData.pos[t]\n            //positions.push( x, y, z );\n            //[x, y, z] = nodesData.pos[s]\n            //positions.push( x, y, z );\n            //colors.push(...nodesData.color[t])\n            //colors.push(...nodesData.color[s])\n            colors.push(...[1, 1, 1, 1, 1,1])\n            //colors.push(0.8);\n            //colors.push(0.8);\n            //colors.push(0.8);\n            //colors.push(0.8);\n            //colors.push(0.8);\n            //colors.push(0.8);\n\n\n\n        }\n\n        }\n        this.positions = positions;\n        this.colors = colors;\n    }\n    deleteAllEdges(){\n        if(this.instancedEdges){\n            this.instancedEdges.geometry.dispose()\n            this.instancedEdges.material.dispose()\n            this.instancedEdges.geometry.needsUpdate = true;\n            this.instancedEdges.material.needsUpdate = true;\n            this.scene.remove(this.instancedEdges)\n            this.instancedEdges = null;\n        }\n    }\n\n    createEdges(nodesData, edgesData) {\n        this.deleteAllEdges()\n\n        this.edgesData = edgesData\n        this.numEdges = this.edgesData.nodes.length\n        this.createVertices(nodesData, edgesData)\n        var geometry = new THREE.BufferGeometry();\n        var material = new THREE.LineBasicMaterial( {\n            vertexColors: true,\n            //blending: THREE.AdditiveBlending,\n            transparent:true,\n            opacity:0.4, linewidth:1 } );\n\n        geometry.setAttribute( \"position\", new THREE.Float32BufferAttribute( this.positions, 3 ) );\n        geometry.setAttribute( 'color', new THREE.Float32BufferAttribute( this.colors, 3 ) );\n\n        geometry.computeBoundingSphere();\n\n        let edges = new THREE.Line( geometry, material );\n        this.instancedEdges = edges\n        this.scene.add( edges );\n    }\n}\n","import * as THREE from \"three\";\nimport colormap from \"colormap\"\nimport alertify  from \"alertifyjs\"\n\nimport Config from \"../../../data/config\";\n\nimport { getMarkerImgVertexShader} from \"./shaders/markerImg.vsh.js\";\nimport {markerImgFragmentShader} from \"./shaders/markerImg.fsh.js\";\n\nimport {getMarkerVertexShader} from \"./shaders/marker.vsh.js\";\nimport {getMarkerFragmentShader, availableMarkers} from \"./shaders/marker.fsh.js\";\n\nimport {randomString, randomChoice} from \"../../helpers/tools\";\n\n/**\n * Class representing the Nodes of the Graph\n * */\nexport default class Nodes {\n    /**\n     * Create a empty nodes object\n     * @param {object} scene - THREE.scene\n     * @param {bool} use2d - If the nodes should be ploted in 2d\n     */\n    constructor(scene, use2d) {\n        this.scene = scene;\n        this.use2d = use2d;\n\n        this.nodesGroup = {};\n        // This string is used in order to indentify the group of nodes\n        // selected. If the string is empty, then the changes will be applied\n        // across all group of nodes\n        this.selectedGroupName = '';\n\n    }\n    /**\n     * Set the selected group\n     * @param {string} groupName - the name of the group. If the groupName thit not exist\n     *  then set the selecedGroupName as a empty string\n     **/\n    setGroup(groupName){\n        this.selectedGroupName = Object.keys(this.nodesGroup).includes(value)? value : '';\n    }\n    /**\n     * Set the selected group\n     * @param {string} groupName - the name of the group. If the groupName thit not exist\n     *  then set the selecedGroupName as a empty string\n     * @return {array} arr - [[...[string, nodesGroupObj]]\n     **/\n    getGroup(){\n        const allGroups = Object.entries(this.nodesGroup);\n        const arr = this.selectedGroupName != ''? [[this.selectedGroupName, this.nodesGroup[this.selectedGroupName]]] : allGroups;\n        return arr;\n    }\n    /**\n     * Set the selected group\n     * @param {string} groupName - the name of the group. If the groupName thit not exist\n     *  then set the selecedGroupName as a empty string\n     **/\n    colorByField(prop){\n        for (const [nodesGroupName, nodesObj] of this.getGroup() ) {\n\n            let bufferColors = nodesObj.nodesData[prop].flat()\n            if (bufferColors.length != nodesObj.numNodes*3){\n                alertify.error(` ${prop} it's not in RGB format `)\n                return\n            }else{\n                this.updateColors(bufferColors, nodesGroupName);\n            }\n\n        }\n    }\n\n    updateColors(colors, nodesGroupName){\n\n        let nodesObj = this.nodesGroup[nodesGroupName];\n        if (nodesObj.fixedColor){\n            let fixedColor = false;\n            nodesObj.mesh.material.vertexShader = getMarkerVertexShader(nodesObj.fixedNodeSize, fixedColor, nodesGroupName);\n\n            nodesObj.mesh.geometry.addAttribute(\"bufferColors\",\n                new THREE.InstancedBufferAttribute(new Float32Array(colors), 3, false));\n\n            nodesObj.fixedColor = fixedColor;\n            delete nodesObj.uniforms.bufferColors;\n            nodesObj.mesh.geometry.needsUpdate = true;\n\n        }else{\n            nodesObj.mesh.geometry.attributes.bufferColors.array = new Float32Array(colors);\n            nodesObj.mesh.geometry.attributes.bufferColors.needsUpdate = true\n\n\n        }\n        nodesObj.mesh.material.needsUpdate = true;\n\n\n    }\n    colorByProp(prop){\n\n        for (const [nodesGroupName, nodesObj] of this.getGroup() ) {\n\n            let colors = colormap({\n                colormap: \"jet\",\n                nshades: nodesObj.numNodes,\n                format: \"float\",\n                alpha: 1\n            })\n            let values = nodesObj.nodesData[prop]\n\n            const bufferColors = colors\n                .map((color, index) => [values[String(index)], color]) // add the prop to sort by\n                .sort(([val1], [val2]) => val2 - val1) // sort by the prop data\n                .map(([, color]) => color)\n                .map(([r, g, b, alpha])=>[r, g, b])\n                .flat()\n            this.updateColors(bufferColors, nodesGroupName);\n\n        }\n    }\n    updateColor(color, nodesGroupName){\n\n        let nodesObj = this.nodesGroup[nodesGroupName];\n        if (nodesObj.fixedColor){\n            nodesObj.uniforms.bufferColors.value = color;\n            //nodesObj.mesh.geometry.needsUpdate = true;\n        }else{\n            let fixedColor = true;\n            nodesObj.uniforms.bufferColors = {\n                type: 'vec3',\n                value: color\n            }\n            nodesObj.mesh.geometry.deleteAttribute('bufferColors');\n            nodesObj.mesh.material.vertexShader = getMarkerVertexShader(nodesObj.fixedNodeSize, fixedColor, nodesGroupName);\n\n            nodesObj.fixedColor = true;\n            nodesObj.mesh.geometry.needsUpdate = true;\n            nodesObj.fixedColor = true;\n        }\n        nodesObj.mesh.material.needsUpdate = true;\n\n    }\n    updateMarker(marker, nodesGroupName){\n\n        let nodesObj = this.nodesGroup[nodesGroupName];\n        nodesObj.mesh.material.vertexShader = getMarkerVertexShader(\n            nodesObj.fixedNodeSize, nodesObj.fixedColor, nodesGroupName);\n\n        nodesObj.mesh.material.fragmentShader = getMarkerFragmentShader(\n            marker, nodesGroupName);\n\n        nodesObj.mesh.material.needsUpdate = true;\n\n\n    }\n    changeMarker(marker){\n\n        for (const [nodesGroupName, nodesObj] of this.getGroup() ) {\n            this.updateMarker(marker, nodesGroupName);\n\n        }\n    }\n    stopUpdate(){\n\n        for (const [nodesGroupName, nodesObj] of this.getGroup() ) {\n            nodesObj.mesh.geometry.needsUpdate = false\n            nodesObj.mesh.material.needsUpdate =false;\n        }\n    }\n\n\n\n    changeColor(colorHEX){\n\n        for (const [nodesGroupName, nodesObj] of this.getGroup() ) {\n            let color = new THREE.Color(colorHEX);\n            this.updateColor(color, nodesGroupName);\n\n        }\n    }\n    //size gui interaction\n    sizeByField(prop){\n\n        for (const [nodesGroupName, nodesObj] of this.getGroup() ) {\n\n            let bufferNodeSize = nodesObj.nodesData[prop].flat()\n            if (bufferNodeSize.length != nodesObj.numNodes){\n                alertify.error(` ${prop} it's not in a valid format `)\n                return\n            }else{\n                this.updateSizes(bufferNodeSize, nodesGroupName);\n            }\n\n        }\n    }\n\n    updateSizes(sizes, nodesGroupName){\n\n        let nodesObj = this.nodesGroup[nodesGroupName];\n        let sMin = Math.min(...sizes)\n        let sMax = Math.max(...sizes)\n        sizes = sizes.map((s)=> (s-sMin)/(sMax-sMin))\n        if (nodesObj.fixedNodeSize){\n            let fixedNodeSize = false;\n            nodesObj.mesh.material.vertexShader = getMarkerVertexShader(fixedNodeSize, nodesObj.fixedColor, nodesGroupName);\n\n\n            let sizesBuffer = new THREE.InstancedBufferAttribute(new Float32Array(sizes), 1, true);\n            nodesObj.mesh.geometry.addAttribute(\"bufferNodeSize\",\n                sizesBuffer);\n\n            nodesObj.fixedNodeSize = fixedNodeSize;\n            delete nodesObj.uniforms.bufferNodeSizes;\n            nodesObj.mesh.geometry.needsUpdate = true;\n\n        }else{\n            nodesObj.mesh.geometry.attributes.bufferNodeSizes.array = new Float32Array(sizes);\n            nodesObj.mesh.geometry.attributes.bufferNodeSizes.needsUpdate = true\n\n        }\n        nodesObj.mesh.material.needsUpdate = true;\n\n\n    }\n    updateSize(size, nodesGroupName){\n\n        let nodesObj = this.nodesGroup[nodesGroupName];\n        if (nodesObj.fixedNodeSize){\n            nodesObj.uniforms.bufferNodeSizes.value = color;\n            //nodesObj.mesh.geometry.needsUpdate = true;\n        }else{\n            let fixedNodeSize = true;\n            nodesObj.uniforms.bufferNodeSizes = {\n                type: 'vec3',\n                value: color\n            }\n            nodesObj.mesh.geometry.deleteAttribute('bufferNodeSizes');\n            nodesObj.mesh.material.vertexShader = getMarkerVertexShader(nodesObj.fixedNodeSize, fixedNodeSize, nodesGroupName);\n            nodesObj.fixedNodeSize = true;\n            nodesObj.mesh.geometry.needsUpdate = true;\n            nodesObj.fixedNodeSize = true;\n        }\n        nodesObj.mesh.material.needsUpdate = true;\n\n    }\n\n\n    // end size gui itneraction\n    changeRadius(value){\n        this.instancedNodes.geometry.attributes.bufferRadius = value;\n        this.instancedNodes.material.needsUpdate = true;\n    }\n\n    changeEdgeColor(color){\n        for (const [nodesGroupName, nodesObj] of this.getGroup() ) {\n        //for (let nodesObj of this.nodesGroup){\n            nodesObj.uniforms.edgeColor.value = new THREE.Color(color);\n            nodesObj.mesh.geometry.needsUpdate = true;\n        }\n    }\n    changeEdgeWidth(value){\n\n        for (const [nodesGroupName, nodesObj] of this.getGroup() ) {\n        //for (let nodesObj of this.nodesGroup){\n            nodesObj.uniforms.edgeWidth.value = value;\n            nodesObj.mesh.geometry.needsUpdate = true;\n        }\n    }\n\n    changeOpacity(value){\n\n        for (const [nodesGroupName, nodesObj] of this.getGroup() ) {\n        //for (let nodesObj of this.nodesGroup){\n            nodesObj.uniforms.bufferOpacity.value = value;\n            nodesObj.mesh.geometry.needsUpdate = true;\n        }\n    }\n    changeScale(value){\n\n        for (const [nodesGroupName, nodesObj] of this.getGroup() ) {\n        //for (let nodesObj of this.nodesGroup){\n            nodesObj.uniforms.bufferNodeScale.value = value;\n            nodesObj.mesh.geometry.needsUpdate = true;\n            nodesObj.mesh.material.needsUpdate = true;\n        }\n    }\n\n    updateNodePositions(positions){\n        this.instancedNodes.geometry.attributes.bufferNodePositions.array = new Float32Array(positions);\n        this.instancedNodes.geometry.attributes.bufferNodePositions.needsUpdate = true\n    }\n\n\n\n    deleteAllNodes(){\n        for (const [key, nodesObj] of Object.entries(this.nodesGroup)) {\n            nodesObj.mesh.geometry.dispose();\n            nodesObj.mesh.material.dispose();\n            nodesObj.mesh.geometry.needsUpdate = true;\n            nodesObj.mesh.material.needsUpdate = true;\n            this.scene.remove(nodesObj.mesh);\n            delete this.nodesGroup[key];\n        }\n    }\n    createNodes(nodesData,  clear=false) {\n        let nodesGroupName;\n        if (clear){\n            nodesGroupName = 'main';\n        }else{\n            nodesGroupName = nodesData.props.includes('name')? nodesData.name : randomString();\n        }\n        console.info(\"Creating nodes\", nodesGroupName);\n\n\n        let what = 2;\n        what = what || 'points';\n        let nodesObj = {}\n\n        const numNodes = Object.keys(nodesData.id).length\n        const fixedNodeSize = nodesData.props.includes(\"size\") == false;\n        const fixedColor = nodesData.props.includes(\"color\") == false;\n\n\n               //if (clear) this.deleteAllNodes();\n\n\n        let bufferNodePositions = nodesData.pos\n\n        let uniforms = {\n            bufferOpacity: {\n                type: 'f', // a float\n                value: 1\n            },\n            bufferNodeScale:{\n                type: 'f',\n                value: 1\n            },\n        };\n        let bufferNodeSize;\n        if (fixedNodeSize){\n            console.info(\"Fixed Node Size\")\n            uniforms.bufferNodeSize = {\n                type: 'f',\n                value: 1\n            }\n        }\n        if (fixedColor){\n            console.info(\"Fixed Color\")\n            uniforms.bufferColors = {\n                type: 'vec3',\n                value: new Float32Array([0.8, 0.0, 0.8])\n            }\n\n        }\n\n        let nodesMesh;\n\n        let material;\n        //const marker = '2'\n        //const markerImg = 'circle';\n        //const markerImg = 'ball';\n        //const markerImg = 'disc';\n        //const markerImg = 'spark1';\n        //const markerImg = 'lensflare';\n\n        let instancedGeometry = new THREE.InstancedBufferGeometry();\n        //if (marker=='1'){\n            ////\n            //let markerGeometry = new  THREE.PlaneBufferGeometry(1, 1, 1)\n            ////let circleGeometry = new  THREE.CircleBufferGeometry(1, 6)\n            //instancedGeometry.index = markerGeometry.index;\n            //instancedGeometry.attributes = markerGeometry.attributes;\n            //this.uniforms.map = { value: new THREE.TextureLoader().load( `textures/sprites/${markerImg}.png` ) }\n            //this.uniforms.useDiffuse2Shadow = {\n                //type: 'f',\n                //value: 0,\n            //}\n            //this.uniforms.edgeColor = {\n                //type: 'vec3',\n                //value: new Float32Array([0.8, 0.8, 0.8])\n            //}\n\n\n            ////instancedGeometry = instancedGeometry.copy(circleGeometry);\n            //material = new THREE.RawShaderMaterial( {\n                ////vertexShader: markerVertexShader,\n                //vertexShader: getMarkerImgVertexShader(fixedNodeSize, fixedColor),\n                //fragmentShader: markerImgFragmentShader,\n                //uniforms: this.uniforms,\n                //transparent: true,\n                ////blending: THREE.AdditiveBlending,\n                //blending: THREE.NormalBlending,\n                ////depthTest: true,\n                ////depthTest: false,\n                //depthWrite: true,\n            //} );\n\n        //}else{\n            //let symbol = \"^\";\n\n            //let symbol= nodesData.props.includes(\"marker\") == false ? randomChoice(availableSymbols): nodesData.marker;\n        let marker = nodesData.props.includes(\"marker\") == false ? randomChoice(Object.values(availableMarkers)): nodesData.marker;\n        //marker = '3do'\n        let markerGeometry = new  THREE.PlaneBufferGeometry(1, 1, 1)\n\n        //let markerGeometry = new THREE.BoxBufferGeometry(1, 1, 1);\r\n        instancedGeometry = instancedGeometry.copy(markerGeometry);\r\n\n        instancedGeometry.maxInstancedCount = numNodes;\r\n            //instancedGeometry.index = markerGeometry.index;\n            //instancedGeometry.attributes = markerGeometry.attributes;\n\n            uniforms.edgeColor = {\n                type: 'vec3',\n                value: new THREE.Color(Config.nodes.edgeColor),\n            }\n            uniforms.edgeWidth = {\n                type: 'f',\n                value: 0.1,\n            }\n            material = new THREE.RawShaderMaterial( {\n                vertexShader: getMarkerVertexShader(fixedNodeSize, fixedColor, nodesGroupName),\n                fragmentShader: getMarkerFragmentShader(marker, nodesGroupName),\n                uniforms: uniforms,\n                transparent: true,\n                //blending: THREE.AdditiveBlending,\n                //blending: THREE.NormalBlending,\n                depthTest: !this.use2d,\n                //depthTest: false,\n                depthWrite: true,\n            } );\n\n\n        //}\n\n        if(fixedNodeSize == false)\n            instancedGeometry.addAttribute(\n                \"bufferNodeSize\",\n                new THREE.InstancedBufferAttribute(new Float32Array(nodesData.size), 1, true)\n            );\n        if(fixedColor == false)\n            instancedGeometry.addAttribute(\"bufferColors\",\n                new THREE.InstancedBufferAttribute(new Float32Array(nodesData.color.flat()), 3, false));\n\n        instancedGeometry.addAttribute(\"bufferNodePositions\",\n            new THREE.InstancedBufferAttribute(new Float32Array(bufferNodePositions), 3, false)\n        );\n\n\n        nodesMesh = new THREE.Mesh(instancedGeometry, material);\n\n        this.scene.add(nodesMesh);\n\n        nodesObj.mesh = nodesMesh;\n        nodesObj.nodesData = nodesData;\n        nodesObj.uniforms = uniforms;\n        nodesObj.marker = marker;\n        nodesObj.fixedNodeSize = fixedNodeSize;\n        nodesObj.fixedColor = fixedColor;\n        nodesObj.numNodes = numNodes;\n\n\n        this.nodesGroup[nodesGroupName] = nodesObj;\n\n    }\n\n\n}\n","//const sdfFunctions = `\n//vec3 sdfCircle(vec2 p, float s){\n    //float edgeWidth = 1/2.;\n    //float minSdf = 0.5;\n    //float sdf = -length(p) + s;\n    //return vec3(sdf, minSdf, edgeWidth);\n//}\n\n//vec3 sdfSquare(vec2 p, float s){\n //return vec3(sdf, minSdf, edgeWidth);\n//}\n\n//vec3 sdfDiamond(vec2 p, float s){\n //return vec3(sdf, minSdf, edgeWidth);\n//}\n\n//vec3 sdfTriangle(vec2 p, float s){\n //return vec3(sdf, minSdf, edgeWidth);\n//}\n\n//vec3 sdfPentagon(vec2 p, float s){\n //return vec3(sdf, minSdf, edgeWidth);\n//}\n\n//vec3 sdfHexagon(vec2 p, float s){\n //return vec3(sdf, minSdf, edgeWidth);\n//}\n\n//vec3 sdfS6(vec2 p, float s){\n //return vec3(sdf, minSdf, edgeWidth);\n//}\n\n//vec3 sdfProduct(vec2 p, float s){\n //return vec3(sdf, minSdf, edgeWidth);\n//}\n\n//vec3 sdfCross(vec2 p, float s){\n //return vec3(sdf, minSdf, edgeWidth);\n//}\n\n//`\nconst distFunctions = {\n    'o': `\n        edgeWidth = edgeWidth/2.;\n        float minSdf = 0.5;\n        sdf = -length(p) + s;\n    `,\n    's': `\n\n        edgeWidth = edgeWidth/2.;\n        float minSdf = 0.5/2.0;\n        vec2 d = abs(p) - vec2(s, s);\n        sdf = -length(max(d,0.0)) - min(max(d.x,d.y),0.0);\n    `,\n    'd':`\n\n        edgeWidth = edgeWidth/4.;\n        float minSdf = 0.5/2.0;\n        vec2 b  = vec2(s, s/2.0);\n        vec2 q = abs(p);\n        float h = clamp((-2.0*ndot(q,b)+ndot(b,b))/dot(b,b),-1.0,1.0);\n        float d = length( q - 0.5*b*vec2(1.0-h,1.0+h) );\n        sdf = -d * sign( q.x*b.y + q.y*b.x - b.x*b.y );\n    `,\n    '^':`\n        float l = s/1.5;\n        float minSdf = 1000.0;\n        float k = sqrt(3.0);\n        p.x = abs(p.x) - l;\n        p.y = p.y + l/k;\n        if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n        p.x -= clamp( p.x, -2.0*l, 0.0 );\n        sdf = length(p)*sign(p.y);\n    `,\n    'p':`\n        edgeWidth = edgeWidth/4.;\n        float minSdf = 0.5/2.0;\n        float r = s/2.0;\n        const vec3 k = vec3(0.809016994,0.587785252,0.726542528);\n        p.x = abs(p.x);\n        p -= 2.0*min(dot(vec2(-k.x,k.y),p),0.0)*vec2(-k.x,k.y);\n        p -= 2.0*min(dot(vec2( k.x,k.y),p),0.0)*vec2( k.x,k.y);\n        p -= vec2(clamp(p.x,-r*k.z,r*k.z),r);\n        sdf = -length(p)*sign(p.y);\n    `,\n    'h':`\n\n        edgeWidth = edgeWidth/4.;\n        float minSdf = 0.5/2.0;\n        float r = s/2.0;\n        const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n        p = abs(p);\n        p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n        p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n        sdf = -length(p)*sign(p.y);\n    `,\n    's6':`\n\n        float minSdf = 0.5/2.0;\n        edgeWidth = edgeWidth/4.;\n        float r = s/2.0;\n        const vec4 k = vec4(-0.5,0.8660254038,0.5773502692,1.7320508076);\n        p = abs(p);\n        p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n        p -= 2.0*min(dot(k.yx,p),0.0)*k.yx;\n        p -= vec2(clamp(p.x,r*k.z,r*k.w),r);\n        sdf = -length(p)*sign(p.y);\n    `,\n    'x':`\n\n        edgeWidth = edgeWidth/8.;\n        float minSdf = 0.5/4.0;\n\n        float r = s/4.0;\n        float w = 0.5;\n        p = abs(p);\n        sdf = -length(p-min(p.x+p.y,w)*0.5) + r;\n    `,\n    '+':`\n\n        edgeWidth = edgeWidth/4.;\n\n        float minSdf = 0.5/2.0;\n        float r = s/15.0; //corner radius\n        vec2 b = vec2(s/1.0, s/3.0); //base , size\n        //vec2 b = vec2(r, r);\n        p = abs(p); p = (p.y>p.x) ? p.yx : p.xy;\n        vec2  q = p - b;\n        float k = max(q.y,q.x);\n        vec2  w = (k>0.0) ? q : vec2(b.y-p.x,-k);\n        sdf = -sign(k)*length(max(w,0.0)) - r;\n    `\n\n}\nfunction getDistFunction(marker){\n    const exist = Object.keys(distFunctions).includes(marker);\n    if (!exist)\n        marker = 'o'\n\n    return distFunctions[marker]\n}\n\nfunction getShading(marker){\n    let shadingStr = ''\n    if (marker != '3do')\n        return '';\n\n    shadingStr = `\n        // shading\n\n        vec3 normal = normalize(vec3(p.xy, sdf));\n        vec3 direction = normalize(vec3(1.0, 1.0, 1.0));\n        float diffuse = max(0.0, dot(direction, normal));\n        float specular = pow(diffuse, 25.0);\n        color = vec3(max(diffuse*color, specular*vec3(1.0)));\n    `\n    return shadingStr;\n\n\n}\n\n\nexport function getMarkerFragmentShader(marker, nodesGroupName='main'){\n    console.info(marker)\n    return  `\n    precision highp float;\n\n    #define SHADER_NAME MarkerNode_${nodesGroupName}\n\n    varying vec3 vColor;\n    varying float vOpacity;\n    varying float vEdgeWidth;\n    varying vec3 vPos;\n    varying vec3 vEdgeColor;\n\n    float ndot(vec2 a, vec2 b ) {\n        return a.x*b.x - a.y*b.y;\n    }\n    void main() {\n\n        vec3 color = vColor;\n        vec3 edgeColor = vEdgeColor;\n        float edgeWidth = vEdgeWidth;\n        vec2 p = vPos.xy;\n        float opacity = vOpacity;\n\n        float s = 0.5;\n        float sdf = 0.0;\n        ${getDistFunction(marker)}\n        if (sdf<0.0) discard;\n\n        //float edge0 = 0.0;\n        //float edge1 = minSdf;\n        float opacity2 = opacity;\n        //if (opacity<1.0) opacity2 =  clamp((sdf - edge0) / (edge1 - edge0), 0.01, opacity) + 0.1;\n        ${getShading(marker)}\n\n        vec4 rgba = vec4(  color, opacity2 );\n\n\n        if (edgeWidth > 0.0){\n            if (sdf < edgeWidth)  rgba  = vec4(edgeColor, 1.0);\n        }\n\n        gl_FragColor = rgba;\n\n    }\n    `\n}\n\nexport const availableMarkers = {\n    'Circle': 'o',\n    'Sphere' :'3do',\n    'Square': 's',\n    'Rhombus' : 'd',\n    'Triangle' : '^' ,\n    'Petagon' : 'p',\n    'Hexagon' : 'h',\n    'Star' : 's6',\n    'Cross' :'+',\n    'X' :'x'\n};\n","\nexport function getMarkerVertexShader(fixedNodeSize=false, fixedColor=false, nodesGroupName='main'){\n    console.info(\"Get Marker Vertex Shader\");\n    let markerVertexShader = `\n\n    #define SHADER_NAME MarkerNode_${nodesGroupName}\n\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n    uniform mat4 viewMatrix;\n    attribute vec3 position;\n\n    attribute vec3 bufferNodePositions;\n    `\n\n    if (fixedNodeSize){\n        markerVertexShader += 'uniform float bufferNodeSize;'\n    }else{\n        markerVertexShader += 'attribute float bufferNodeSize;'\n    }\n    if (fixedColor){\n        markerVertexShader += 'uniform vec3 bufferColors;'\n    }else{\n\n        markerVertexShader += 'attribute vec3 bufferColors;'\n    }\n\n    markerVertexShader += `\n\n    uniform float bufferOpacity;\n    uniform float bufferNodeScale;\n    uniform float edgeWidth;\n    uniform vec3 edgeColor;\n\n    varying vec3 vColor;\n    varying vec3 vEdgeColor;\n    varying vec3 vPos;\n    varying float vOpacity;\n    varying float vEdgeWidth;\n\n    void main() {\n        vec4 viewNodePos = modelViewMatrix * vec4( bufferNodePositions, 1.0 );\n\n        vec4 mvPosition = viewNodePos +  vec4(position*bufferNodeScale*bufferNodeSize, 0);\n        // if particle size\n        //vec4 mvPosition = viewNodePos +  vec4(position, 0);\n        //gl_PointSize  = bufferNodeScale*bufferNodeSize;\n        //gl_PointSize  = 5.0;\n\n        gl_Position = projectionMatrix * mvPosition;\n\n\n        vColor = bufferColors;\n        vOpacity = bufferOpacity;\n        vPos = position;\n        vEdgeWidth = edgeWidth;\n        vEdgeColor = edgeColor;\n    }\n\n    `\n    return markerVertexShader;\n\n}\n\n","export const markerImgFragmentShader = `\nprecision highp float;\n#define SHADER_NAME MarkerImgNode\nuniform sampler2D map;\n\nvarying vec2 vUv;\n\nvarying vec3 vColor;\nvarying float vOpacity;\nvarying float vUseDiffuse2Shadow;\n\nvoid main() {\n\n    vec3 color = vColor;\n    vec4 diffuseColor = texture2D( map, vUv );\n\n    float opacity = diffuseColor.w*vOpacity;\n    gl_FragColor = vec4(\n        (1.0 - vUseDiffuse2Shadow)*color + vUseDiffuse2Shadow*diffuseColor.xyz*color,\n        opacity\n    );\n    if (diffuseColor.w< 0.4 ) discard;\n\n}\n`\n","\nexport default function getMarkerImgVertexShader(fixedNodeSize=false, fixedColor=false){\n    let markerVertexShader = `\n    precision highp float;\n\n    #define SHADER_NAME MarkerImgNode\n\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n    uniform mat4 viewMatrix;\n    attribute vec3 position;\n    attribute vec2 uv;\n\n    attribute vec3 bufferNodePositions;\n    `\n\n    if (fixedNodeSize){\n        markerVertexShader += 'uniform float bufferNodeSize;'\n    }else{\n\n        markerVertexShader += 'attribute float bufferNodeSize;'\n    }\n    if (fixedColor){\n        markerVertexShader += 'uniform vec3 bufferColors;'\n    }else{\n\n        markerVertexShader += 'attribute vec3 bufferColors;'\n    }\n\n\n    markerVertexShader += `\n\n    uniform float bufferOpacity;\n    uniform float bufferNodeScale;\n    uniform float useDiffuse2Shadow;\n\n    varying vec3 vColor;\n    varying vec2 vUv;\n    varying float vUseDiffuse2Shadow;\n    varying float vOpacity;\n\n    void main() {\n\n        vec4 viewNodePos = modelViewMatrix * vec4( bufferNodePositions, 1.0 );\n\n        vec4 mvPosition = viewNodePos +  vec4(position*bufferNodeScale*bufferNodeSize, 0);\n\n        gl_Position = projectionMatrix * mvPosition;\n\n        vUv = uv;\n\n        vColor = bufferColors;\n        vOpacity = bufferOpacity;\n        vUseDiffuse2Shadow = useDiffuse2Shadow;\n    }\n\n    `\n    return markerVertexShader;\n\n}\n\n","import * as THREE from 'three';\n\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass.js';\n\nimport {BloomPass} from 'three/examples/jsm/postprocessing/BloomPass.js';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js';\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader.js';\n\nimport alertify from 'alertifyjs';\n\nimport Config from '../../../data/config';\n\nimport Stats from './../../helpers/stats';\n\n\nfunction dataURIToBlob( dataURI ) {\n    const binStr = window.atob( dataURI.split( ',' )[1] );\n    const len = binStr.length;\n    const arr = new Uint8Array( len );\n    for ( let i = 0; i < len; i++ ) {\n        arr[i] = binStr.charCodeAt( i );\n    }\n    return new window.Blob( [arr] );\n}\n\nfunction saveDataURI( name, dataURI ) {\n    const blob = dataURIToBlob( dataURI );\n\n    // force download\n    const link = document.createElement( 'a' );\n    link.download = name;\n    link.href = window.URL.createObjectURL( blob );\n    link.onclick = () => {\n        window.setTimeout( () => {\n            window.URL.revokeObjectURL( blob );\n            link.removeAttribute( 'href' );\n        }, 500 );\n\n    };\n    link.click();\n}\n\nfunction defaultFileName (ext) {\n    const str = `${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}${ext}`;\n    return str.replace(/\\//g, '-').replace(/:/g, '.');\n}\n\n\nexport default class Renderer {\n    constructor(\n        useHighQuality,\n        useBloom,\n        scene, controls, container, canvas, camera, appState ) {\n        this.scene = scene;\n        this.controls = controls;\n        this.canvas = canvas;\n        this.container = container;\n        this.camera = camera\n        this.appState = appState\n\n        //renderer.toneMapping = THREE.ReinhardToneMapping;\n        this.useHighQuality = useHighQuality;\n        this.useBloom = useBloom;\n        // Create WebGL render\n        this.renderer = new THREE.WebGLRenderer(\n            {\n                canvas: canvas,\n                antialias: useHighQuality,\n                preserveDrawingBuffer: true,\n                alpha:true\n            }\n        );\n        this.renderer.autoClear = false;\n        if(Config.useStats) {\n            this.stats = new Stats(this.renderer);\n            this.stats.setUp();\n        }\n\n        this.renderer.toneMapping = THREE.ReinhardToneMapping;\n        this.renderer.setPixelRatio(window.devicePixelRatio); // For retina\n\n\n        //this.renderer.shadowMap.enabled = false;\n        //this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\n        // Get anisotropy for textures\n        Config.maxAnisotropy = this.renderer.getMaxAnisotropy();\n\n        // Initial size update set to canvas canvas\n        //\n        if (useHighQuality || useBloom){\n            this.initComposer()\n        }\n        if (useBloom){\n            this.initBloomComposer()\n        }\n        //if (useHighQuality){\n            //this.initFXAAAComposer()\n        //}\n\n        //if (useBloom){\n\n                //if(highQuality){\n        //let fxaaPass = new ShaderPass( FXAAShader );\n\n        //const pixelRatio = this.renderer.getPixelRatio();\n\n        //fxaaPass.material.uniforms[ 'resolution' ].value.x = 1 / ( this.canvas.offsetWidth * pixelRatio );\n        //fxaaPass.material.uniforms[ 'resolution' ].value.y = 1 / ( this.canvas.offsetHeight * pixelRatio );\n        //this.fxaaPass = fxaaPass\n\n        //this.composer.addPass( fxaaPass );\n\n        //}\n\n        //\n\n\n        this.updateSize(this.canvas.offsetWidth,this.canvas.offsetHeight);\n        // Listeners\n        document.addEventListener('DOMContentLoaded', () => this.updateSize(), false);\n        window.addEventListener('resize', () => this.updateSize(), false);\n\n        this.controls.addEventListener('change', ()=>this.render());\n        this.render = this.render.bind(this)\n        this.updateSize = this.updateSize.bind(this)\n\n        this.takeScreenshot = this.takeScreenshot.bind(this)\n        const btnSave = document.getElementById(\"btnSaveImage\");\n        if(btnSave)\n        btnSave.addEventListener(\"click\",  event=>this.takeScreenshot())\n\n\n\n\n    }\n    initComposer(){\n        this.composer = new EffectComposer( this.renderer );\n        let renderPass = new RenderPass( this.scene, this.camera );\n        this.composer.addPass( renderPass );\n\n    }\n    initBloomComposer(){\n\n        const bloomPass = new BloomPass(\n            1,    // strength\n            25,   // kernel size\n            4,    // sigma ?\n            256,  // blur render target resolution\n        );\n        const strength = 1;\n        const radius = 2;\n        const threshold = 0;\n        this.bloomPass = new UnrealBloomPass(\n            new THREE.Vector2( window.innerWidth, window.innerHeight ),\n            strength, radius, threshold );\n        this.composer.addPass(this.bloomPass);\n\n\n    }\n\n    setCameraAspect(widthRender, heightRender, keepPos=true) {\n\n        const canvas = this.canvas;\n        //const widthRender = window.innerWidth\n        //const heightRender = window.innerHeight\n        //\n        if(keepPos){\n            const aspect = widthRender / heightRender\n            const change = this.appState.originalAspect/aspect\n\n            const newSize = 1 * change;\n            this.camera.left = -aspect * newSize / 2;\n            this.camera.right = aspect * newSize  / 2;\n            this.camera.top = newSize / 2;\n            this.camera.bottom = -newSize / 2;\n        }\n        this.camera.aspect = widthRender / heightRender;\n\n        this.camera.updateProjectionMatrix();\n    }\n\n    updateSize(widthRender, heightRender, keepPos=true) { //if (this.appState.takingScreenshot) return;\n        widthRender = widthRender || this.container.clientWidth\n        heightRender= heightRender ||this.container.clientHeight\n\n        this.setCameraAspect(widthRender, heightRender, keepPos)\n\n        if (this.useHighQuality || this.useBloom){\n\n            this.renderer.setSize(widthRender, heightRender, );\n            this.composer.setSize( widthRender, heightRender );\n        }else{\n            this.renderer.setSize(widthRender, heightRender, );\n        }\n\n        var pixelRatio = this.renderer.getPixelRatio();\n\n        //this.fxaaPass.material.uniforms[ 'resolution' ].value.x = 1 / ( widthRender * pixelRatio );\n        //this.fxaaPass.material.uniforms[ 'resolution' ].value.y = 1 / ( heightRender * pixelRatio );\n        //this.appState.originalAspect  = aspect\n        this.render()\n        //const pixelRatio = window.devicePixelRatio;\n        //const width  = widthRender  * pixelRatio | 0;\n        //const height = heightRender * pixelRatio | 0;\n        //const needResize = canvas.width !== width || canvas.height !== height;\n\n        //if (needResize) {\n\n        //this.renderer.setSize(width, height, );\n        //this.camera.aspect = widthRender / heightRender;\n        //this.camera.updateProjectionMatrix();\n        //}\n        //this.camera.aspect = window.innerWidth / window.innerHeight;\n        //this.camera.updateProjectionMatrix();\n\n        //this.renderer.setSize( window.innerWidth, window.innerHeight );\n\n        //this.camera.aspect = this.canvas.clientWidth / this.canvas.clientHeight;\n        //this.camera.updateProjectionMatrix();\n        //if (resizeRendererToDisplaySize(renderer)) {\n        //this.camera.aspect = this.canvas.clientWidth / this.canvas.clientHeight;\n        //this. camera.updateProjectionMatrix();\n\n        ////}\n        //this.renderer.setSize(this.canvas.clientWidth, this.canvas.clientHeight);\n\n    }\n\n    render() {\n        // Renders scene to canvas target\n        // this.pickHelper.pick( scene, camera, 0)\n\n        if(Config.useStats)\n            Stats.start();\n\n        //this.controls.update();\n        //\n        if (this.useHighQuality || this.useBloom){\n\n            //this.renderer.render(this.scene, this.camera);\n            this.composer.render();\n        }else{\n            this.renderer.render(this.scene, this.camera);\n        }\n        if(Config.useStats)\n            Stats.end();\n\n\n    }\n    delete(){\n        this.render = ()=>0;\n        document.removeEventListener('DOMContentLoaded', () => this.updateSize(), false);\n        window.removeEventListener('resize', () => this.updateSize(), false);\n        const btnSave = document.getElementById(\"btnSaveImage\");\n        if(btnSave)\n            btnSave.removeEventListener(\"click\",  event=>this.takeScreenshot())\n\n    }\n    stop(){\n        //const dataURI = this.getURI(widthImage, heightImage, saveWithTransparency);\n        this.delete()\n    }\n    getURI(widthImage, heightImage, saveWithTransparency){\n        widthImage = widthImage || this.container.clientWidth\n        heightImage= heightImage ||this.container.clientHeight\n\n\n        this.setCameraAspect(widthImage, heightImage, false)\n        // set camera and renderer to desired screenshot dimension\n        //this.camera.aspect = widthImage / heightImage;\n        //this.camera.updateProjectionMatrix();\n\n        const color = this.scene.background;\n        if(saveWithTransparency){\n            this.renderer.setClearColor( 0x000000, 0 );\n            this.scene.background = null;\n        }\n        this.renderer.setSize(  widthImage, heightImage );\n\n        //this.renderer.render( this.scene, this.camera, null, false );\n\n        this.composer.setSize( widthImage, heightImage );\n        this.composer.render();\n\n        const dataURI = this.canvas.toDataURL( 'image/png', 1.0 );\n\n        if(saveWithTransparency)\n            this.scene.background = color;\n        this.appState.takingScreenshot = false\n\n        this.updateSize();\n\n        return dataURI\n    }\n    takeScreenshot(){\n\n        $('#saveImageModal').modal(\"hide\")\n        this.appState.takingScreenshot = true\n        this.appState.stopChanges = true\n        const widthImage = parseInt(document.getElementById(\"widthSaveImage\").value)\n        const heightImage = parseInt(document.getElementById(\"heightSaveImage\").value)\n\n        const saveWithTransparency = document.getElementById(\"saveWithTransparency\").checked\n\n\n        const DataURI = this.getURI(widthImage, heightImage, saveWithTransparency);\n        saveDataURI(defaultFileName( '.png' ), DataURI);\n\n\n\n    }\n}\n","// Local vars for rStats\nlet rS, bS, glS, tS;\n\nexport default class Stats {\n  constructor(renderer) {\n    this.renderer = renderer;\n  }\n\n  setUp() {\n    bS = new BrowserStats();\n    glS = new glStats();\n    tS = new threeStats(this.renderer);\n\n    rS = new rStats({\n      CSSPath: './css/',\n      userTimingAPI: true,\n      values: {\n        frame: { caption: 'Total frame time (ms)', over: 16, average: true, avgMs: 100 },\n        fps: { caption: 'Framerate (FPS)', below: 30 },\n        calls: { caption: 'Calls (three.js)', over: 3000 },\n        raf: { caption: 'Time since last rAF (ms)', average: true, avgMs: 100 },\n        rstats: { caption: 'rStats update (ms)', average: true, avgMs: 100 },\n        texture: { caption: 'GenTex', average: true, avgMs: 100 }\n      },\n      groups: [\n        { caption: 'Framerate', values: ['fps', 'raf'] },\n        { caption: 'Frame Budget', values: ['frame', 'texture', 'setup', 'render'] }\n      ],\n      fractions: [\n        { base: 'frame', steps: ['texture', 'setup', 'render'] }\n      ],\n      plugins: [bS, tS, glS]\n    });\n  };\n\n  static start() {\n    rS('frame').start();\n    glS.start();\n\n    rS('rAF').tick();\n    rS('FPS').frame();\n\n    rS('render').start();\n  };\n\n  static end() {\n    rS('render').end(); // render finished\n    rS('frame').end(); // frame finished\n\n    // Local rStats update\n    rS('rStats').start();\n    rS().update();\n    rS('rStats').end();\n  };\n}\n","/**\n * Return a random string\n * @return {string} A random string with 13 elements\n */\nexport const randomString = ()=>Math.random().toString(36).substring(2, 15);;\n\n/**\n * Random select a element of a given array\n * @param  {array} arr -\n * @return {Object} A random choiced element of the given array\n */\nexport const randomChoice = (arr) => arr[Math.floor(arr.length * Math.random())];\n\n\n","import * as THREE from \"three\";\nimport * as dat from 'dat.gui';\n\nimport {availableMarkers} from \"./../components/nodes/shaders/marker.fsh.js\";\n\n/**\n * Update the dropdown itens related with a given datGUI element\n * @param  {DOMGui} datGUI select element\n * @param  {Array} Array of strings with the dropdown itens\n */\nfunction updateDropdown(target, list){\n    let innerHTMLStr = \"\";\n    for(var i=0; i<list.length; i++){\n        var str = \"<option value='\" + list[i] + \"'>\" + list[i] + \"</option>\";\n        innerHTMLStr += str;\n    }\n\n    if (innerHTMLStr != \"\") target.domElement.children[0].innerHTML = innerHTMLStr;\n}\n\n// Manages all dat.GUI interactions\nexport default class DatGUI {\n    constructor(\n        idCanvasHTML,\n        scene, renderer,\n        camera,\n        nodes0, edges0,\n        Config,\n        appState) {\n        const gui = new dat.GUI({autoPlace:false, name:idCanvasHTML});\n        this.gui = gui\n\n        //container.appendChild(gui.domElement);\n        document.getElementById(`datGui${idCanvasHTML}`).appendChild(gui.domElement);\n        const render = renderer.render;\n        //canvas.appendChild(gui.domElement);\n        //this.camera = main.camera.threeCamera;\n        //this.controls = main.controls.threeControls;\n        //this.light = main.light;\n\n        /* Scene */\n        let sceneFolder = gui.addFolder('Scene');\n\n        sceneFolder.addColor(Config.scene, \"color\").name('Color').onChange((color) => {\n            scene.background = new THREE.Color(color)\n            render()\n        });\n\n        sceneFolder.open()\n        /* Nodes */\n        let nodesFolder = gui.addFolder('Nodes');\n        this.comunityField = nodesFolder.add(appState, \"comunityField\", appState.comunityField)\n            .name(\"Comunity\")\n            .onChange(function(value) {\n                nodes0.setComunity(value)\n            });\n        let markers = {\n            marker : {\n                \"--\" : \"\"\n            }\n        }\n        nodesFolder.add(markers, \"marker\", availableMarkers)\n            .name(\"marker\")\n            .onChange(function(value) {\n                nodes0.changeMarker(value)\n                render();\n            });\n        nodesFolder.add( Config.nodes, 'show' ).onChange( function ( value ) {\n            for (let [nodeName, node] of Object.entries(nodes0.nodes)){\n                node.visible=value;\n            }\n\n            Config.nodes.show = value\n            render();\n        } );\n\n        nodesFolder.addColor(Config.nodes, \"color\").name('Color').onChange((color) => {\n            nodes0.changeColor(color)\n            render()\n        });\n        this.sizeField = nodesFolder.add(appState, \"defaultProps\", appState.defaultProps)\n            .name(\"Size Field\")\n            .onChange(function(value) {\n                nodes0.sizeByField(value)\n\n                render();\n            });\n        nodesFolder.add(Config.nodes, 'scale', 1, 10, 0.1).name('Scale').onChange((value) => {\n            nodes0.changeScale(value)\n\n            render();\n            //node.material.opacity=value;\n        });\n        nodesFolder.addColor(Config.nodes, \"edgeColor\").name('Edge Color').onChange((color) => {\n            nodes0.changeEdgeColor(color)\n            render()\n        });\n        nodesFolder.add(Config.nodes, 'edgeWidth', 0.0, 1, 0.01).name('Edge Width').onChange((value) => {\n            nodes0.changeEdgeWidth(value)\n            render()\n            //node.material.opacity=value;\n        });\n        nodesFolder.add(Config.nodes, 'opacity', 0, 1).name('Opacity').onChange((value) => {\n            nodes0.changeOpacity(value)\n\n            render();\n            //node.material.opacity=value;\n        });\n\n        this.colorProp = nodesFolder.add(appState, \"defaultProps\", appState.defaultProps)\n            .name(\"Color by Attr.\")\n            .onChange(function(value) {\n                nodes0.colorByProp(value)\n            });\n        this.colorField = nodesFolder.add(appState, \"defaultProps\", appState.defaultProps)\n            .name(\"Color Field\")\n            .onChange(function(value) {\n                nodes0.colorByField(value)\n            });\n\n\n\n        nodesFolder.open()\n        this.nodesFolder = nodesFolder\n\n        /* Edges */\n        let edgesFolder = gui.addFolder('Edges');\n\n        edgesFolder.add( Config.edges, 'show' ).onChange( function ( value ) {\n\n            Config.edges.show = value\n            render();\n        } );\n        //edgesFolder.addColor(Config.edges, \"color\").name('Color')\n        //.onChange((color) => {\n        //edges0.changeColor(color)\n        //});\n\n\n        let colorEdge = {prop:[], field:[]}\n        this.colorEdgeProp = edgesFolder.add(colorEdge, \"prop\", colorEdge.prop)\n            .name(\"Color by Prop.\")\n            .onChange(function(value) {\n                edges0.colorByProp(value)\n            });\n        this.colorEdgeField = edgesFolder.add(colorEdge, \"field\", colorEdge.prop)\n            .name(\"Color by Field.\")\n            .onChange(function(value) {\n                edges0.colorByField(value)\n            });\n\n        //nodesFolder.add(Config.nodes, 'scale', 0.01, 5).name('Scale').onChange((value) => {\n        //nodes0.changeScale(value)\n        ////node.material.opacity=value;\n        //});\n        edgesFolder.add(Config.edges, 'opacity', 0, 1).name('Opacity').onChange((value) => {\n            edges0.changeOpacity(value)\n            //node.material.opacity=value;\n        });\n\n        //Edges Bloom\n\n        //edgesFolder.addColor(Config.layers[edgesBloomScene], 'clearColor' ).onChange( function ( color ) {\n\n        //bloomPassEdges.clearColor.set(color)\n        //render()\n        //});\n\n        //edgesFolder.add( Config.layers[edgesBloomScene], 'enabled' ).onChange( function ( value ) {\n\n        //bloomPassEdges.enabled = value\n        //render();\n        //} );\n        //edgesFolder.add( Config.layers[edgesBloomScene], 'strength', 0.0, 2 ).onChange( function ( value ) {\n        ////bloomPassEdges.copyUniforms.opacity(value)\n        //bloomPassEdges.strength = value\n        //render();\n        //} );\n\n\n        //edgesFolder.add( Config.layers[edgesBloomScene], 'exposure', 0.01, 2 ).onChange( function ( value ) {\n        //renderer.toneMappingExposure = Math.pow( value, 1.0 );\n        //render();\n        //} );\n\n        //edgesFolder.add( Config.layers[edgesBloomScene], 'bloomThreshold', 0.0, 10 ).step(0.01).onChange( function ( value ) {\n        //bloomPassEdges.threshold = Number( value )/100;\n        //render();\n        //} );\n\n        //edgesFolder.add( Config.layers[edgesBloomScene], 'bloomStrength', 0.0, 2.0 ).onChange( function ( value ) {\n        //bloomPassEdges.strength = Number( value );\n        //render();\n        //} );\n\n        //edgesFolder.add( Config.layers[edgesBloomScene], 'bloomRadius', 0.0, 1.0 ).step( 0.01 ).onChange( function ( value ) {\n        //bloomPassEdges.radius = Number( value );\n        //render();\n        //} );\n        edgesFolder.open()\n        let renderFolder = gui.addFolder('Render');\n        renderFolder.add( Config.bloomPass, 'exposure', 0.1, 5 ).onChange( function ( value ) {\n\n            renderer.toneMappingExposure = Math.pow( value, 4.0 );\n            render()\n\n        } );\n        renderFolder.add( Config.bloomPass, 'threshold', 0.0, 1.0 ).onChange( function ( value ) {\n\n            renderer.bloomPass.threshold = Number( value );\n            render()\n\n        } );\n\n        renderFolder.add( Config.bloomPass, 'strength', 0.0, 10.0 ).onChange( function ( value ) {\n\n            renderer.bloomPass.strength = Number( value );\n            render()\n\n        } );\n\n        renderFolder.add( Config.bloomPass, 'radius', 0.0, 1.0 ).step( 0.01 ).onChange( function ( value ) {\n\n            renderer.bloomPass.radius = Number( value );\n            render()\n\n        } );\n\n        renderFolder.open()\n\n        /* Controls */\n        //const controlsFolder = gui.addFolder('Controls');\n        //controlsFolder.add(Config.controls, 'autoRotate').name('Auto Rotate').onChange((value) => {\n        //this.controls.autoRotate = value;\n        //});\n        //const controlsAutoRotateSpeedGui = controlsFolder.add(Config.controls, 'autoRotateSpeed', -1, 1).name('Rotation Speed');\n        //controlsAutoRotateSpeedGui.onChange((value) => {\n        //this.controls.enableRotate = false;\n        //this.controls.autoRotateSpeed = value;\n        //});\n        //controlsAutoRotateSpeedGui.onFinishChange(() => {\n        //this.controls.enableRotate = true;\n        //});\n\n        renderer.updateSize();\n        /* Mesh */\n\n    }\n    updateComunityField(values){\n        values.unshift('');\n        updateDropdown(this.comunityField , values);\n    }\n    updateNodeColorProp(values){\n        values.unshift('');\n        values = values.filter(v=> v != 'pos')\n        updateDropdown(this.colorField , values);\n        updateDropdown(this.colorProp , values);\n        updateDropdown(this.sizeField , values.filter(v=> v!='color'));\n    }\n    updateEdgeColorProp(values){\n        values.unshift('');\n        updateDropdown(this.colorEdgeField , values);\n        updateDropdown(this.colorEdgeProp , values);\n    }\n\n\n\n}\n\n//unreal bloom effect\n//enabled: true\n//needsSwap: false\n//clear: false\n//renderToScreen: true\n//strength: 5\n//radius: 0\n//threshold: 0\n//resolution: Vector2 {x: 1366, y: 348}\n//clearColor: Color\n//r: 255\n//g: 255\n//b: 255\n//__proto__: Object\n//renderTargetsHorizontal: (5) [WebGLRenderTarget, WebGLRenderTarget, WebGLRenderTarget, WebGLRenderTarget, WebGLRenderTarget]\n//renderTargetsVertical: (5) [WebGLRenderTarget, WebGLRenderTarget, WebGLRenderTarget, WebGLRenderTarget, WebGLRenderTarget]\n//nMips: 5\n//renderTargetBright: WebGLRenderTarget {width: 683, height: 174, scissor: Vector4, scissorTest: false, viewport: Vector4, …}\n//highPassUniforms: {tDiffuse: {…}, luminosityThreshold: {…}, smoothWidth: {…}, defaultColor: {…}, defaultOpacity: {…}}\n//materialHighPassFilter: ShaderMaterial {uuid: \"031D54E9-22F3-4F42-8C31-EF4D970724C3\", name: \"\", type: \"ShaderMaterial\", fog: false, blending: 1, …}\n//separableBlurMaterials: (5) [ShaderMaterial, ShaderMaterial, ShaderMaterial, ShaderMaterial, ShaderMaterial]\n//compositeMaterial: ShaderMaterial {uuid: \"DBA670AF-AC33-428C-BAB3-91BE67FE2901\", name: \"\", type: \"ShaderMaterial\", fog: false, blending: 1, …}\n//bloomTintColors: (5) [Vector3, Vector3, Vector3, Vector3, Vector3]\n//copyUniforms: {tDiffuse: {…}, opacity: {…}}\n//materialCopy: ShaderMaterial {uuid: \"369D3C24-A73E-4576-BB78-E1261A5E6D64\", name: \"\", type: \"ShaderMaterial\", fog: false, blending: 2, …}\n//oldClearColor: Color {}\n//oldClearAlpha: 1\n","import Keyboard from \"../../utils/keyboard\";\nimport Helpers from \"../../utils/helpers\";\n//import Config from \"../../data/config\";\nimport alertify  from \"alertifyjs\"\n// Manages all input interactions\nexport default class Interaction {\n    constructor(canvas, appState, Config, datGui, keypressFunc) {\n        // Properties\n        this.canvas = canvas;\n        this.keypressFunc = keypressFunc\n        this.datGui = datGui\n        this.timeout = null;\n\n        // Instantiate keyboard helper\n        this.keyboard = new Keyboard();\n\n        //this.keyboard = new Keyboard(document.getElementById('containergraphCanvas'));\n\n        // Listeners\n        // Mouse events\n\n\n        this.keypressEvent = this.keypressEvent.bind(this)\n        // Keyboard events\n        this.keyboard.domElement.addEventListener(\"keydown\", (event) => this.keypressEvent(event)\n            // Only once\n\n            //if(this.keyboard.eventMatches(event, 'escape')) {\n            //  console.log('Escape pressed');\n            // }\n        );\n        this.appState = appState\n    }\n    keypressEvent(event){\n        let repeat = event.repeat\n        let key = event.key\n        let alertHTMLobj = document.getElementById(\"bootstraAlertStrong\")\n        //let bootstrapAlert = document.getElementById(\"bootstrapAlert\")\n        let bootstrapAlert = $(\"#bootstrapAlert\")\n        switch (key.toLowerCase()) {\n            case \"e\":\n                alertify.message(\"Edition Mode\")\n                this.datGui.closed = true\n                this.appState.vimMode = \"Edition\";\n                console.info(\"Vim mode Edition\");\n                break;\n\n            case \"v\":\n                alertify.message(\"Visual Mode\")\n                this.datGui.closed = false\n                this.appState.vimMode = \"Visual\";\n                console.info(\"Vim mode Visualization\");\n                break;\n            case \"n\":\n                alertify.message(\"Navigation Mode\")\n                this.datGui.closed = true\n                this.appState.vimMode = \"Navigation\";\n                break;\n\n            case \"s\":\n                document.getElementById(\"widthSaveImage\").value = window.innerWidth\n                document.getElementById(\"heightSaveImage\").value = window.innerHeight\n                $('#saveImageModal').modal(\"show\")\n\n            case \"d\":\n                if (this.appState.vimMode == \"Edition\")\n                    this.keypressFunc(key, \"deleteNode\")\n                break;\n\n\n            case \"l\":\n            case \"j\":\n            case \"i\":\n            case \"k\":\n\n                if ((this.appState.vimMode == \"Visual\") &&(key==\"l\")){\n                    alertify.confirm(\"Are you sure you want to reload the graph?\",\n                        ()=>{\n                            this.keypressFunc(key, \"reloadGraph\")\n                        });\n                }\n\n                if (this.appState.vimMode == \"Edition\"){\n                    this.keypressFunc(key, \"move\")\n                    repeat = false\n                }\n                break;\n\n            case \"r\":\n                if (this.appState.vimMode == \"Visual\")\n                    alertify.message(\"Recalculating  positions\")\n                    this.keypressFunc (key,\"recalcPos\")\n                break;\n\n\n\n            default:\n                break;\n        }\n        if (repeat) {\n            return;\n        }\n\n        //console.log(\"keydown\", event);\n    }\n}\n","// Global imports -\nimport * as THREE from \"three\";\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nimport alertify  from \"alertifyjs\"\n\nimport Renderer from \"./components/renderer/main\";\nimport Nodes from \"./components/nodes/main\";\nimport Edges from \"./components/edges/main\";\n\nimport Keyboard from \"./interactions/keyboard\";\nimport DatGUI from './interactions/datGUI';\n\n\n/**\n * Random select a element of a given array\n * @param  {string}\n * @return {Object} A random choiced element of the given array\n */\nexport default class Graph {\n    /**\n     * @param  {string} Id of Canvas DOMElement\n     * @param  {string} Id of Canvas DOMElement\n     * @param  {bool}\n     * @param  {bool} If the graph should be ploted in 2d\n     * @return {Object} A random choiced element of the given array\n     */\n    constructor(\n        idCanvasHTML,\n        Config,\n        keyboardPressFunction,\n        use2d=false,\n        useHighQuality=true,\n        useBloom=true,\n    ) {\n\n\n        this.Config = Config\n        this.use2d = use2d;\n        this.useHighQuality = useHighQuality;\n        this.useBloom = useBloom;\n        this.idCanvasHTML = idCanvasHTML\n        this.canvas = document.getElementById(`${idCanvasHTML}`);\n        this.container = document.getElementById(`container${idCanvasHTML}`);\n        if(use2d){\n            this.camera = new THREE.OrthographicCamera(\n                2, -2, 2, -2, Config.camera.near, Config.camera.far);\n\n        }else{\n            this.camera = new THREE.PerspectiveCamera(\n                Config.camera.fov, Config.camera.aspect, Config.camera.near, Config.camera.far);\n        }\n\n        this.scene = new THREE.Scene();\n\n        this.renderer;\n        this.state;\n        this.keyboardPressFunction = keyboardPressFunction\n\n        //this.init = this.init.bind(this)\n    }\n    init(){\n        this.state = {\n            vimMode: \"Visual\",\n            isLoaded: false,\n            firstLoad: true,\n            takingScreenshot: false,\n            defaultProps: {},\n            stopChanges: false,\n            renders: [],\n            comunityField:{},\n            rendering: false,\n            defaultProps: {}\n        }\n\n        let viewSize = 1;\n        var aspectRatio = window.innerWidth / window.innerHeight;\n        this.state.originalAspect = window.innerWidth / window.innerHeight;\n\n        this.scene.add(this.camera);\n\n        this.scene.background = new THREE.Color(this.Config.scene.color);\n\n        this.nodes = new Nodes(this.scene, this.use2d);\n        this.edges = new Edges(this.scene, 0, 1);\n\n\n        this.controls = new OrbitControls(this.camera, this.canvas);\n\n        this.controls.target.set(0, 0, 0);\n        this.controls.enableKeys=true;\n        this.controls.screenSpacePanning = true;\n        //this.controls.update();\n\n        if(this.use2d){\n\n            this.controls.enableRotate=false;\n            //this.controls.maxPolarAngle = 0; // radians\n            //this.controls.minAzimuthAngle = - 0; // radians\n            //this.controls.maxAzimuthAngle = 0; // radians\n\n        }\n        this.renderer = new Renderer(\n            this.highQuality,\n            this.useBloom,\n            this.scene, this.controls, this.container, this.canvas, this.camera, this.state);\n\n        if (this.Config.useGuiControl)\n            this.datGui = new DatGUI(\n                this.idCanvasHTML,\n                this.scene,\n                this.renderer,\n                this.camera,\n                this.nodes,\n                this.edges,\n                this.Config,\n                //bloomPassEdges,edgesBloomScene,\n                this.state);\n        if (this.Config.useKeyboard)\n            this.keyboardInteraction = new Keyboard(\n                this.canvas,\n                this.state,\n                this.Config,\n                this.datGui.gui,\n                this.keyboardPressFunction,\n            );\n\n        //{\n            //const color = 0xffffff;\n            //const intensity = 4;\n            //const light = new THREE.DirectionalLight(color, intensity);\n            //light.position.set(-1, 2, 4);\n            //light.layers.enable(0)\n            //this.camera.add(light);\n        //}\n    }\n    /**\n     * Random select a element of a given array\n     */\n    ressetLook(){\n        //let position = this.edges.instancedEdges.geometry.boundingSphere.center\n        //this.camera.position.z = 4*this.edges.instancedEdges.geometry.boundingSphere.radius\n        this.camera.position.z = 4;\n        //this.camera.lookAt(position)\n        this.camera.updateProjectionMatrix();\n        this.renderer.render()\n    }\n    /**\n     * Random select a element of a given array\n     */\n    deleteGraph(){\n        this.nodes.deleteAllNodes()\n        this.edges.deleteAllEdges()\n    }\n    /**\n     * @param  {string} Id of Canvas DOMElement\n     * @param  {string} Id of Canvas DOMElement\n     * @param  {bool}\n     * @param  {bool} If the graph should be ploted in 2d\n     * @return {Object} A random choiced element of the given array\n     */\n    getURI(width, height, transparency){\n        transparency = transparency || false;\n        const uri = this.renderer.getURI(width, height, transparency);\n        this.uri = uri\n    }\n    /**\n     * Random select a element of a given array\n     */\n    stopRender(){\n        //this.deleteGraph();\n        this.renderer.stop();\n\n    }\n}\n\n\n","// Provides simple static functions that are used multiple times in the app\nexport default class Helpers {\n  static throttle(fn, threshhold, scope) {\n    threshhold || (threshhold = 250);\n    let last, deferTimer;\n\n    return function() {\n      const context = scope || this;\n\n      const now  = +new Date,\n          args = arguments;\n\n      if(last && now < last + threshhold) {\n        clearTimeout(deferTimer);\n        deferTimer = setTimeout(function() {\n          last = now;\n          fn.apply(context, args);\n        }, threshhold);\n      }\n      else {\n        last = now;\n        fn.apply(context, args);\n      }\n    };\n  }\n\n  static logProgress() {\n    return function(xhr) {\n      if(xhr.lengthComputable) {\n        const percentComplete = xhr.loaded / xhr.total * 100;\n\n        console.log(Math.round(percentComplete, 2) + '% downloaded');\n      }\n    }\n  }\n\n  static logError() {\n    return function(xhr) {\n      console.error(xhr);\n    }\n  }\n\n  static handleColorChange(color) {\n    return (value) => {\n      if(typeof value === 'string') {\n        value = value.replace('#', '0x');\n      }\n\n      color.setHex(value);\n    };\n  }\n\n  static update(mesh) {\n    this.needsUpdate(mesh.material, mesh.geometry);\n  }\n\n  static needsUpdate(material, geometry) {\n    return function() {\n      material.shading = +material.shading; //Ensure number\n      material.vertexColors = +material.vertexColors; //Ensure number\n      material.side = +material.side; //Ensure number\n      material.needsUpdate = true;\n      geometry.verticesNeedUpdate = true;\n      geometry.normalsNeedUpdate = true;\n      geometry.colorsNeedUpdate = true;\n    };\n  }\n\n  static updateTexture(material, materialKey, textures) {\n    return function(key) {\n      material[materialKey] = textures[key];\n      material.needsUpdate = true;\n    };\n  }\n}\n","const ALIAS = {\n  'left'\t\t: 37,\n  'up'\t\t  : 38,\n  'right'\t\t: 39,\n  'down'\t\t: 40,\n  'space'\t\t: 32,\n  'tab'\t\t  : 9,\n  'escape'\t: 27\n};\n\nexport default class Keyboard {\n  constructor(domElement) {\n    this.domElement = domElement || document;\n    this.keyCodes = {};\n\n    // bind keyEvents\n    this.domElement.addEventListener('keydown', (event) => this.onKeyChange(event), false);\n    this.domElement.addEventListener('keyup', (event) => this.onKeyChange(event), false);\n\n    // bind window blur\n    window.addEventListener('blur', () => this.onBlur, false);\n  }\n\n  destroy() {\n    this.domElement.removeEventListener('keydown', (event) => this.onKeyChange(event), false);\n    this.domElement.removeEventListener('keyup', (event) => this.onKeyChange(event), false);\n\n    // unbind window blur event\n    window.removeEventListener('blur', () => this.onBlur, false);\n  }\n\n  onBlur() {\n    for(const prop in this.keyCodes)\n      this.keyCodes[prop] = false;\n  }\n\n  onKeyChange(event) {\n    // log to debug\n    //console.log('onKeyChange', event, event.keyCode, event.shiftKey, event.ctrlKey, event.altKey, event.metaKey)\n\n    // update this.keyCodes\n    const keyCode = event.keyCode;\n    this.keyCodes[keyCode] = event.type === 'keydown';\n  }\n\n  pressed(keyDesc) {\n    const keys = keyDesc.split('+');\n    for(let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      let pressed = false;\n      if(Object.keys(ALIAS).indexOf(key) != -1) {\n        pressed = this.keyCodes[ALIAS[key]];\n      } else {\n        pressed = this.keyCodes[key.toUpperCase().charCodeAt(0)];\n      }\n      if(!pressed)\n        return false;\n    }\n\n    return true;\n  }\n\n  eventMatches(event, keyDesc) {\n    const aliases = ALIAS;\n    const aliasKeys = Object.keys(aliases);\n    const keys = keyDesc.split('+');\n    // log to debug\n    // console.log('eventMatches', event, event.keyCode, event.shiftKey, event.ctrlKey, event.altKey, event.metaKey)\n    for(let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      let pressed = false;\n      if(key === 'shift') {\n        pressed = event.shiftKey ? true : false;\n      } else if(key === 'ctrl') {\n        pressed = event.ctrlKey ? true : false;\n      } else if(key === 'alt') {\n        pressed = event.altKey ? true : false;\n      } else if(key === 'meta') {\n        pressed = event.metaKey ? true : false;\n      } else if(aliasKeys.indexOf(key) !== -1) {\n        pressed = event.keyCode === aliases[key];\n      } else if(event.keyCode === key.toUpperCase().charCodeAt(0)) {\n        pressed = true;\n      }\n      if(!pressed)\n        return false;\n    }\n\n    return true;\n  }\n}\n"],"sourceRoot":""}